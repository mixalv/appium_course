"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COMMAND_TYPES = exports.AndroidBootstrap = void 0;

require("source-map-support/register");

var _uiautomator = _interopRequireDefault(require("./uiautomator"));

var _net = _interopRequireDefault(require("net"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _support = require("@appium/support");

const log = _support.logger.getLogger('AndroidBootstrap');

const COMMAND_TYPES = {
  ACTION: 'action',
  SHUTDOWN: 'shutdown'
};
exports.COMMAND_TYPES = COMMAND_TYPES;
const SEND_COMMAND_TIMEOUT = 1 * 60 * 1000;

class AndroidBootstrap {
  constructor(adb, systemPort = 4724, webSocket = undefined) {
    this.adb = adb;
    this.systemPort = systemPort;
    this.webSocket = webSocket;
    this.ignoreUnexpectedShutdown = false;
  }

  get onUnexpectedShutdown() {
    if (!this._onUnexpectedShutdownPromise) {
      let reject;
      this._onUnexpectedShutdownPromise = new _bluebird.default(function _onUnexpectedShutdownPromise(_resolve, _reject) {
        reject = _reject;
      });
      this._onUnexpectedShutdownPromise.cancel = reject;
    }

    return this._onUnexpectedShutdownPromise;
  }

  async start(appPackage, disableAndroidWatchers = false, acceptSslCerts = false) {
    try {
      const rootDir = _path.default.resolve(__dirname, '..', '..');

      const startDetector = s => /Appium Socket Server Ready/.test(s);

      const bootstrapJar = _path.default.resolve(rootDir, 'bootstrap', 'bin', 'AppiumBootstrap.jar');

      await this.init();
      await this.adb.forwardPort(this.systemPort, 4724);
      this.process = await this.uiAutomator.start(bootstrapJar, 'io.appium.android.bootstrap.Bootstrap', startDetector, '-e', 'pkg', appPackage, '-e', 'disableAndroidWatchers', disableAndroidWatchers, '-e', 'acceptSslCerts', acceptSslCerts);
      this.process.on('output', (stdout, stderr) => {
        const alertRe = /Emitting system alert message/;

        if (alertRe.test(stdout)) {
          log.debug('Emitting alert message...');

          if (this.webSocket) {
            this.webSocket.sockets.emit('alert', {
              message: stdout
            });
          }
        }

        let stdoutLines = (stdout || '').split('\n');
        const uiautoLog = /\[APPIUM-UIAUTO\](.+)\[\/APPIUM-UIAUTO\]/;

        for (let line of stdoutLines) {
          if (line.trim()) {
            if (uiautoLog.test(line)) {
              let innerLine = uiautoLog.exec(line)[1].trim();
              let logMethod = log.info.bind(log);

              if (/\[debug\]/.test(innerLine)) {
                logMethod = log.debug.bind(log);
              }

              logMethod(`[BOOTSTRAP LOG] ${innerLine}`);
            } else {
              log.debug(`[UIAUTO STDOUT] ${line}`);
            }
          }
        }

        let stderrLines = (stderr || '').split('\n');

        for (let line of stderrLines) {
          if (line.trim()) {
            log.debug(`[UIAUTO STDERR] ${line}`);
          }
        }
      });
      return await new _bluebird.default((resolve, reject) => {
        try {
          this.socketClient = _net.default.connect(this.systemPort);
          this.socketClient.on('error', err => {
            if (!this.ignoreUnexpectedShutdown) {
              throw new Error(`Android bootstrap socket crashed: ${err}`);
            }
          });
          this.socketClient.once('connect', () => {
            log.info('Android bootstrap socket is now connected');
            resolve();
          });
        } catch (err) {
          reject(err);
        }
      });
    } catch (err) {
      log.errorAndThrow(`Error occured while starting AndroidBootstrap. Original error: ${err}`);
    }
  }

  async sendCommand(type, extra = {}) {
    if (!this.socketClient) {
      throw new Error('Socket connection closed unexpectedly');
    }

    return await new _bluebird.default((resolve, reject) => {
      let cmd = Object.assign({
        cmd: type
      }, extra);
      let cmdJson = `${JSON.stringify(cmd)} \n`;
      log.debug(`Sending command to android: ${_lodash.default.truncate(cmdJson, {
        length: 1000
      }).trim()}`);
      this.socketClient.write(cmdJson);
      this.socketClient.setEncoding('utf8');
      let streamData = '';
      let sendCommandTimeoutHandler = null;
      this.socketClient.on('data', data => {
        if (sendCommandTimeoutHandler) {
          clearTimeout(sendCommandTimeoutHandler);
        }

        log.debug('Received command result from bootstrap');

        try {
          streamData = JSON.parse(streamData + data);
          this.socketClient.removeAllListeners('data');

          if (streamData.status === 0) {
            return resolve(streamData.value);
          }

          reject((0, _baseDriver.errorFromCode)(streamData.status, streamData.value));
        } catch (err) {
          if (!_lodash.default.isString(streamData)) {
            log.error('Got an unexpected error inside socket listener');
            log.error(err.stack);
            return reject((0, _baseDriver.errorFromCode)(13, err.message));
          }

          log.debug(`Stream still not complete, waiting up to ${SEND_COMMAND_TIMEOUT}ms for the data to arrive`);
          streamData += data;
          sendCommandTimeoutHandler = setTimeout(() => {
            const errMsg = `Server socket stopped responding. The recent response was '${streamData}'`;
            log.error(errMsg);
            this.socketClient.removeAllListeners('data');
            reject((0, _baseDriver.errorFromCode)(13, errMsg));
          }, SEND_COMMAND_TIMEOUT);
        }
      });
    });
  }

  async sendAction(action, params = {}) {
    let extra = {
      action,
      params
    };
    return await this.sendCommand(COMMAND_TYPES.ACTION, extra);
  }

  async shutdown() {
    if (!this.uiAutomator) {
      log.warn('Cannot shut down Android bootstrap; it has already shut down');
      return;
    }

    this.uiAutomator.removeAllListeners(_uiautomator.default.EVENT_CHANGED);

    if (this.socketClient) {
      await this.sendCommand(COMMAND_TYPES.SHUTDOWN);
    }

    await this.uiAutomator.shutdown();
    this.uiAutomator = null;
  }

  async init() {
    this.uiAutomator = new _uiautomator.default(this.adb);
    this.uiAutomator.on(_uiautomator.default.EVENT_CHANGED, msg => {
      if (msg.state === _uiautomator.default.STATE_STOPPED) {
        this.uiAutomator = null;
        this.onUnexpectedShutdown.cancel(new Error('UiAUtomator shut down unexpectedly'));
      }
    });
  }

  set ignoreUnexpectedShutdown(ignore) {
    log.debug(`${ignore ? 'Ignoring' : 'Watching for'} bootstrap disconnect`);
    this._ignoreUnexpectedShutdown = ignore;
  }

  get ignoreUnexpectedShutdown() {
    return this._ignoreUnexpectedShutdown;
  }

}

exports.AndroidBootstrap = AndroidBootstrap;
var _default = AndroidBootstrap;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ib290c3RyYXAuanMiXSwibmFtZXMiOlsibG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiQ09NTUFORF9UWVBFUyIsIkFDVElPTiIsIlNIVVRET1dOIiwiU0VORF9DT01NQU5EX1RJTUVPVVQiLCJBbmRyb2lkQm9vdHN0cmFwIiwiY29uc3RydWN0b3IiLCJhZGIiLCJzeXN0ZW1Qb3J0Iiwid2ViU29ja2V0IiwidW5kZWZpbmVkIiwiaWdub3JlVW5leHBlY3RlZFNodXRkb3duIiwib25VbmV4cGVjdGVkU2h1dGRvd24iLCJfb25VbmV4cGVjdGVkU2h1dGRvd25Qcm9taXNlIiwicmVqZWN0IiwiQiIsIl9yZXNvbHZlIiwiX3JlamVjdCIsImNhbmNlbCIsInN0YXJ0IiwiYXBwUGFja2FnZSIsImRpc2FibGVBbmRyb2lkV2F0Y2hlcnMiLCJhY2NlcHRTc2xDZXJ0cyIsInJvb3REaXIiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsInN0YXJ0RGV0ZWN0b3IiLCJzIiwidGVzdCIsImJvb3RzdHJhcEphciIsImluaXQiLCJmb3J3YXJkUG9ydCIsInByb2Nlc3MiLCJ1aUF1dG9tYXRvciIsIm9uIiwic3Rkb3V0Iiwic3RkZXJyIiwiYWxlcnRSZSIsImRlYnVnIiwic29ja2V0cyIsImVtaXQiLCJtZXNzYWdlIiwic3Rkb3V0TGluZXMiLCJzcGxpdCIsInVpYXV0b0xvZyIsImxpbmUiLCJ0cmltIiwiaW5uZXJMaW5lIiwiZXhlYyIsImxvZ01ldGhvZCIsImluZm8iLCJiaW5kIiwic3RkZXJyTGluZXMiLCJzb2NrZXRDbGllbnQiLCJuZXQiLCJjb25uZWN0IiwiZXJyIiwiRXJyb3IiLCJvbmNlIiwiZXJyb3JBbmRUaHJvdyIsInNlbmRDb21tYW5kIiwidHlwZSIsImV4dHJhIiwiY21kIiwiT2JqZWN0IiwiYXNzaWduIiwiY21kSnNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJfIiwidHJ1bmNhdGUiLCJsZW5ndGgiLCJ3cml0ZSIsInNldEVuY29kaW5nIiwic3RyZWFtRGF0YSIsInNlbmRDb21tYW5kVGltZW91dEhhbmRsZXIiLCJkYXRhIiwiY2xlYXJUaW1lb3V0IiwicGFyc2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdGF0dXMiLCJ2YWx1ZSIsImlzU3RyaW5nIiwiZXJyb3IiLCJzdGFjayIsInNldFRpbWVvdXQiLCJlcnJNc2ciLCJzZW5kQWN0aW9uIiwiYWN0aW9uIiwicGFyYW1zIiwic2h1dGRvd24iLCJ3YXJuIiwiVWlBdXRvbWF0b3IiLCJFVkVOVF9DSEFOR0VEIiwibXNnIiwic3RhdGUiLCJTVEFURV9TVE9QUEVEIiwiaWdub3JlIiwiX2lnbm9yZVVuZXhwZWN0ZWRTaHV0ZG93biJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxHQUFHLEdBQUdDLGdCQUFPQyxTQUFQLENBQWlCLGtCQUFqQixDQUFaOztBQUNBLE1BQU1DLGFBQWEsR0FBRztBQUNwQkMsRUFBQUEsTUFBTSxFQUFFLFFBRFk7QUFFcEJDLEVBQUFBLFFBQVEsRUFBRTtBQUZVLENBQXRCOztBQUlBLE1BQU1DLG9CQUFvQixHQUFHLElBQUksRUFBSixHQUFTLElBQXRDOztBQUVBLE1BQU1DLGdCQUFOLENBQXVCO0FBQ3JCQyxFQUFBQSxXQUFXLENBQUVDLEdBQUYsRUFBT0MsVUFBVSxHQUFHLElBQXBCLEVBQTBCQyxTQUFTLEdBQUdDLFNBQXRDLEVBQWlEO0FBQzFELFNBQUtILEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLRSx3QkFBTCxHQUFnQyxLQUFoQztBQUNEOztBQUV1QixNQUFwQkMsb0JBQW9CLEdBQUk7QUFDMUIsUUFBSSxDQUFDLEtBQUtDLDRCQUFWLEVBQXdDO0FBQ3RDLFVBQUlDLE1BQUo7QUFDQSxXQUFLRCw0QkFBTCxHQUFvQyxJQUFJRSxpQkFBSixDQUFNLFNBQVNGLDRC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cnQgVWlBdXRvbWF0b3IgZnJvbSAnLi91aWF1dG9tYXRvcic7XG5pbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvckZyb21Db2RlIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0FuZHJvaWRCb290c3RyYXAnKTtcbmNvbnN0IENPTU1BTkRfVFlQRVMgPSB7XG4gIEFDVElPTjogJ2FjdGlvbicsXG4gIFNIVVRET1dOOiAnc2h1dGRvd24nXG59O1xuY29uc3QgU0VORF9DT01NQU5EX1RJTUVPVVQgPSAxICogNjAgKiAxMDAwO1xuXG5jbGFzcyBBbmRyb2lkQm9vdHN0cmFwIHtcbiAgY29uc3RydWN0b3IgKGFkYiwgc3lzdGVtUG9ydCA9IDQ3MjQsIHdlYlNvY2tldCA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuYWRiID0gYWRiO1xuICAgIHRoaXMuc3lzdGVtUG9ydCA9IHN5c3RlbVBvcnQ7XG4gICAgdGhpcy53ZWJTb2NrZXQgPSB3ZWJTb2NrZXQ7XG4gICAgdGhpcy5pZ25vcmVVbmV4cGVjdGVkU2h1dGRvd24gPSBmYWxzZTtcbiAgfVxuXG4gIGdldCBvblVuZXhwZWN0ZWRTaHV0ZG93biAoKSB7XG4gICAgaWYgKCF0aGlzLl9vblVuZXhwZWN0ZWRTaHV0ZG93blByb21pc2UpIHtcbiAgICAgIGxldCByZWplY3Q7XG4gICAgICB0aGlzLl9vblVuZXhwZWN0ZWRTaHV0ZG93blByb21pc2UgPSBuZXcgQihmdW5jdGlvbiBfb25VbmV4cGVjdGVkU2h1dGRvd25Qcm9taXNlIChfcmVzb2x2ZSwgX3JlamVjdCkge1xuICAgICAgICByZWplY3QgPSBfcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9vblVuZXhwZWN0ZWRTaHV0ZG93blByb21pc2UuY2FuY2VsID0gcmVqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fb25VbmV4cGVjdGVkU2h1dGRvd25Qcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQgKGFwcFBhY2thZ2UsIGRpc2FibGVBbmRyb2lkV2F0Y2hlcnMgPSBmYWxzZSwgYWNjZXB0U3NsQ2VydHMgPSBmYWxzZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByb290RGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XG4gICAgICBjb25zdCBzdGFydERldGVjdG9yID0gKHMpID0+IC9BcHBpdW0gU29ja2V0IFNlcnZlciBSZWFkeS8udGVzdChzKTtcbiAgICAgIGNvbnN0IGJvb3RzdHJhcEphciA9IHBhdGgucmVzb2x2ZShyb290RGlyLCAnYm9vdHN0cmFwJywgJ2JpbicsICdBcHBpdW1Cb290c3RyYXAuamFyJyk7XG5cbiAgICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xuICAgICAgYXdhaXQgdGhpcy5hZGIuZm9yd2FyZFBvcnQodGhpcy5zeXN0ZW1Qb3J0LCA0NzI0KTtcbiAgICAgIHRoaXMucHJvY2VzcyA9IGF3YWl0IHRoaXMudWlBdXRvbWF0b3Iuc3RhcnQoXG4gICAgICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcEphciwgJ2lvLmFwcGl1bS5hbmRyb2lkLmJvb3RzdHJhcC5Cb290c3RyYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICBzdGFydERldGVjdG9yLCAnLWUnLCAncGtnJywgYXBwUGFja2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgJy1lJywgJ2Rpc2FibGVBbmRyb2lkV2F0Y2hlcnMnLCBkaXNhYmxlQW5kcm9pZFdhdGNoZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAnLWUnLCAnYWNjZXB0U3NsQ2VydHMnLCBhY2NlcHRTc2xDZXJ0cyk7XG5cbiAgICAgIC8vIHByb2Nlc3MgdGhlIG91dHB1dFxuICAgICAgdGhpcy5wcm9jZXNzLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgY29uc3QgYWxlcnRSZSA9IC9FbWl0dGluZyBzeXN0ZW0gYWxlcnQgbWVzc2FnZS87XG4gICAgICAgIGlmIChhbGVydFJlLnRlc3Qoc3Rkb3V0KSkge1xuICAgICAgICAgIGxvZy5kZWJ1ZygnRW1pdHRpbmcgYWxlcnQgbWVzc2FnZS4uLicpO1xuICAgICAgICAgIGlmICh0aGlzLndlYlNvY2tldCkge1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc29ja2V0cy5lbWl0KCdhbGVydCcsIHttZXNzYWdlOiBzdGRvdXR9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgYm9vdHN0cmFwIGxvZ2dlciB3cmFwcyBpdHMgb3duIGxvZyBsaW5lcyB3aXRoXG4gICAgICAgIC8vIFtBUFBJVU0tVUlBVVRPXSAuLi4gW0FQUElVTS1VSUFVVE9dXG4gICAgICAgIC8vIGFuZCBsZWF2ZXMgYWN0dWFsIFVpQXV0b21hdG9yIGxvZ3MgYXMgdGhleSBhcmVcbiAgICAgICAgbGV0IHN0ZG91dExpbmVzID0gKHN0ZG91dCB8fCAnJykuc3BsaXQoJ1xcbicpO1xuICAgICAgICBjb25zdCB1aWF1dG9Mb2cgPSAvXFxbQVBQSVVNLVVJQVVUT1xcXSguKylcXFtcXC9BUFBJVU0tVUlBVVRPXFxdLztcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBzdGRvdXRMaW5lcykge1xuICAgICAgICAgIGlmIChsaW5lLnRyaW0oKSkge1xuICAgICAgICAgICAgaWYgKHVpYXV0b0xvZy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgIGxldCBpbm5lckxpbmUgPSB1aWF1dG9Mb2cuZXhlYyhsaW5lKVsxXS50cmltKCk7XG4gICAgICAgICAgICAgIGxldCBsb2dNZXRob2QgPSBsb2cuaW5mby5iaW5kKGxvZyk7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBib290c3RyYXAgbG9nIGNvbnNpZGVycyBzb21ldGhpbmcgZGVidWcsIGxvZyB0aGF0IGFzXG4gICAgICAgICAgICAgIC8vIGRlYnVnIGFuZCBub3QgaW5mb1xuICAgICAgICAgICAgICBpZiAoL1xcW2RlYnVnXFxdLy50ZXN0KGlubmVyTGluZSkpIHtcbiAgICAgICAgICAgICAgICBsb2dNZXRob2QgPSBsb2cuZGVidWcuYmluZChsb2cpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxvZ01ldGhvZChgW0JPT1RTVFJBUCBMT0ddICR7aW5uZXJMaW5lfWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKGBbVUlBVVRPIFNURE9VVF0gJHtsaW5lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGRlcnJMaW5lcyA9IChzdGRlcnIgfHwgJycpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBzdGRlcnJMaW5lcykge1xuICAgICAgICAgIGlmIChsaW5lLnRyaW0oKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBbVUlBVVRPIFNUREVSUl0gJHtsaW5lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIG9ubHkgcmV0dXJuIHdoZW4gdGhlIHNvY2tldCBjbGllbnQgaGFzIGNvbm5lY3RlZFxuICAgICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnNvY2tldENsaWVudCA9IG5ldC5jb25uZWN0KHRoaXMuc3lzdGVtUG9ydCk7XG4gICAgICAgICAgLy8gV2luZG93czogdGhlIHNvY2tldCBlcnJvcnMgb3V0IHdoZW4gQURCIHJlc3RhcnRzLiBMZXQncyBjYXRjaCBpdCB0byBhdm9pZCBjcmFzaGluZy5cbiAgICAgICAgICB0aGlzLnNvY2tldENsaWVudC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWdub3JlVW5leHBlY3RlZFNodXRkb3duKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW5kcm9pZCBib290c3RyYXAgc29ja2V0IGNyYXNoZWQ6ICR7ZXJyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc29ja2V0Q2xpZW50Lm9uY2UoJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgICBsb2cuaW5mbygnQW5kcm9pZCBib290c3RyYXAgc29ja2V0IGlzIG5vdyBjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIG9jY3VyZWQgd2hpbGUgc3RhcnRpbmcgQW5kcm9pZEJvb3RzdHJhcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlbmRDb21tYW5kICh0eXBlLCBleHRyYSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLnNvY2tldENsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb2NrZXQgY29ubmVjdGlvbiBjbG9zZWQgdW5leHBlY3RlZGx5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjbWQgPSBPYmplY3QuYXNzaWduKHtjbWQ6IHR5cGV9LCBleHRyYSk7XG4gICAgICBsZXQgY21kSnNvbiA9IGAke0pTT04uc3RyaW5naWZ5KGNtZCl9IFxcbmA7XG4gICAgICBsb2cuZGVidWcoYFNlbmRpbmcgY29tbWFuZCB0byBhbmRyb2lkOiAke18udHJ1bmNhdGUoY21kSnNvbiwge2xlbmd0aDogMTAwMH0pLnRyaW0oKX1gKTtcbiAgICAgIHRoaXMuc29ja2V0Q2xpZW50LndyaXRlKGNtZEpzb24pO1xuICAgICAgdGhpcy5zb2NrZXRDbGllbnQuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgIGxldCBzdHJlYW1EYXRhID0gJyc7XG4gICAgICBsZXQgc2VuZENvbW1hbmRUaW1lb3V0SGFuZGxlciA9IG51bGw7XG4gICAgICB0aGlzLnNvY2tldENsaWVudC5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChzZW5kQ29tbWFuZFRpbWVvdXRIYW5kbGVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbmRDb21tYW5kVGltZW91dEhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxvZy5kZWJ1ZygnUmVjZWl2ZWQgY29tbWFuZCByZXN1bHQgZnJvbSBib290c3RyYXAnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzdHJlYW1EYXRhID0gSlNPTi5wYXJzZShzdHJlYW1EYXRhICsgZGF0YSk7XG4gICAgICAgICAgLy8gd2Ugc3VjY2Vzc2Z1bGx5IHBhcnNlZCBKU09OIHNvIHdlJ3ZlIGdvdCBhbGwgdGhlIGRhdGEsXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBzb2NrZXQgbGlzdGVuZXIgYW5kIGV2YWx1YXRlXG4gICAgICAgICAgdGhpcy5zb2NrZXRDbGllbnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG4gICAgICAgICAgaWYgKHN0cmVhbURhdGEuc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShzdHJlYW1EYXRhLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVqZWN0KGVycm9yRnJvbUNvZGUoc3RyZWFtRGF0YS5zdGF0dXMsIHN0cmVhbURhdGEudmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKCFfLmlzU3RyaW5nKHN0cmVhbURhdGEpKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ0dvdCBhbiB1bmV4cGVjdGVkIGVycm9yIGluc2lkZSBzb2NrZXQgbGlzdGVuZXInKTtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlcnIuc3RhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvckZyb21Db2RlKDEzLCBlcnIubWVzc2FnZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2cuZGVidWcoYFN0cmVhbSBzdGlsbCBub3QgY29tcGxldGUsIHdhaXRpbmcgdXAgdG8gJHtTRU5EX0NPTU1BTkRfVElNRU9VVH1tcyBmb3IgdGhlIGRhdGEgdG8gYXJyaXZlYCk7XG4gICAgICAgICAgc3RyZWFtRGF0YSArPSBkYXRhO1xuICAgICAgICAgIHNlbmRDb21tYW5kVGltZW91dEhhbmRsZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVyck1zZyA9IGBTZXJ2ZXIgc29ja2V0IHN0b3BwZWQgcmVzcG9uZGluZy4gVGhlIHJlY2VudCByZXNwb25zZSB3YXMgJyR7c3RyZWFtRGF0YX0nYDtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXRDbGllbnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyb3JGcm9tQ29kZSgxMywgZXJyTXNnKSk7XG4gICAgICAgICAgfSwgU0VORF9DT01NQU5EX1RJTUVPVVQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRBY3Rpb24gKGFjdGlvbiwgcGFyYW1zID0ge30pIHtcbiAgICBsZXQgZXh0cmEgPSB7YWN0aW9uLCBwYXJhbXN9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRDb21tYW5kKENPTU1BTkRfVFlQRVMuQUNUSU9OLCBleHRyYSk7XG4gIH1cblxuICBhc3luYyBzaHV0ZG93biAoKSB7XG4gICAgaWYgKCF0aGlzLnVpQXV0b21hdG9yKSB7XG4gICAgICBsb2cud2FybignQ2Fubm90IHNodXQgZG93biBBbmRyb2lkIGJvb3RzdHJhcDsgaXQgaGFzIGFscmVhZHkgc2h1dCBkb3duJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGxpc3RuZXJzIHNvIHdlIGRvbid0IHRyaWdnZXIgdW5leHBlY3RlZCBzaHV0ZG93blxuICAgIHRoaXMudWlBdXRvbWF0b3IucmVtb3ZlQWxsTGlzdGVuZXJzKFVpQXV0b21hdG9yLkVWRU5UX0NIQU5HRUQpO1xuICAgIGlmICh0aGlzLnNvY2tldENsaWVudCkge1xuICAgICAgYXdhaXQgdGhpcy5zZW5kQ29tbWFuZChDT01NQU5EX1RZUEVTLlNIVVRET1dOKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy51aUF1dG9tYXRvci5zaHV0ZG93bigpO1xuICAgIHRoaXMudWlBdXRvbWF0b3IgPSBudWxsO1xuICB9XG5cbiAgLy8gdGhpcyBoZWxwZXIgZnVuY3Rpb24gbWFrZXMgdW5pdCB0ZXN0aW5nIGVhc2llci5cbiAgYXN5bmMgaW5pdCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRoaXMudWlBdXRvbWF0b3IgPSBuZXcgVWlBdXRvbWF0b3IodGhpcy5hZGIpO1xuXG4gICAgLy8gSGFuZGxlIHVuZXhwZWN0ZWQgVWlBdXRvbWF0b3Igc2h1dGRvd25cbiAgICB0aGlzLnVpQXV0b21hdG9yLm9uKFVpQXV0b21hdG9yLkVWRU5UX0NIQU5HRUQsIChtc2cpID0+IHtcbiAgICAgIGlmIChtc2cuc3RhdGUgPT09IFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQRUQpIHtcbiAgICAgICAgdGhpcy51aUF1dG9tYXRvciA9IG51bGw7XG4gICAgICAgIHRoaXMub25VbmV4cGVjdGVkU2h1dGRvd24uY2FuY2VsKG5ldyBFcnJvcignVWlBVXRvbWF0b3Igc2h1dCBkb3duIHVuZXhwZWN0ZWRseScpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldCBpZ25vcmVVbmV4cGVjdGVkU2h1dGRvd24gKGlnbm9yZSkge1xuICAgIGxvZy5kZWJ1ZyhgJHtpZ25vcmUgPyAnSWdub3JpbmcnIDogJ1dhdGNoaW5nIGZvcid9IGJvb3RzdHJhcCBkaXNjb25uZWN0YCk7XG4gICAgdGhpcy5faWdub3JlVW5leHBlY3RlZFNodXRkb3duID0gaWdub3JlO1xuICB9XG5cbiAgZ2V0IGlnbm9yZVVuZXhwZWN0ZWRTaHV0ZG93biAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lnbm9yZVVuZXhwZWN0ZWRTaHV0ZG93bjtcbiAgfVxufVxuXG5leHBvcnQgeyBBbmRyb2lkQm9vdHN0cmFwLCBDT01NQU5EX1RZUEVTIH07XG5leHBvcnQgZGVmYXVsdCBBbmRyb2lkQm9vdHN0cmFwO1xuIl0sImZpbGUiOiJsaWIvYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
