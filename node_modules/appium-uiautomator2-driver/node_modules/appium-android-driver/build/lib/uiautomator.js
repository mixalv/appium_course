"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UiAutomator = void 0;

require("source-map-support/register");

var _events = _interopRequireDefault(require("events"));

var _support = require("@appium/support");

const log = _support.logger.getLogger('UiAutomator');

class UiAutomator extends _events.default.EventEmitter {
  constructor(adb) {
    if (!adb) {
      log.errorAndThrow('adb is required to instantiate UiAutomator');
    }

    super();
    this.adb = adb;
    this.tempPath = '/data/local/tmp/';
  }

  async start(uiAutomatorBinaryPath, className, startDetector, ...extraParams) {
    let processIsAlive;

    try {
      log.debug('Starting UiAutomator');
      this.changeState(UiAutomator.STATE_STARTING);
      log.debug('Parsing uiautomator jar');
      let jarName = this.parseJarNameFromPath(uiAutomatorBinaryPath);
      await this.adb.push(uiAutomatorBinaryPath, this.tempPath);
      await this.killUiAutomatorOnDevice();
      log.debug('Starting UIAutomator');
      let args = ['shell', 'uiautomator', 'runtest', jarName, '-c', className, ...extraParams];
      this.proc = this.adb.createSubProcess(args);
      this.proc.on('exit', (code, signal) => {
        processIsAlive = false;

        if (this.state !== UiAutomator.STATE_STOPPED && this.state !== UiAutomator.STATE_STOPPING) {
          let msg = `UiAutomator exited unexpectedly with code ${code}, ` + `signal ${signal}`;
          log.error(msg);
        } else if (this.state === UiAutomator.STATE_STOPPING) {
          log.debug('UiAutomator shut down normally');
        }

        this.changeState(UiAutomator.STATE_STOPPED);
      });
      await this.proc.start(startDetector);
      processIsAlive = true;
      this.changeState(UiAutomator.STATE_ONLINE);
      return this.proc;
    } catch (e) {
      this.emit(UiAutomator.EVENT_ERROR, e);

      if (processIsAlive) {
        await this.killUiAutomatorOnDevice();
        await this.proc.stop();
      }

      log.errorAndThrow(e);
    }
  }

  async shutdown() {
    log.debug('Shutting down UiAutomator');

    if (this.state !== UiAutomator.STATE_STOPPED) {
      this.changeState(UiAutomator.STATE_STOPPING);
      await this.proc.stop();
    }

    await this.killUiAutomatorOnDevice();
    this.changeState(UiAutomator.STATE_STOPPED);
  }

  parseJarNameFromPath(binaryPath) {
    let reTest = /.*(\/|\\)(.*\.jar)/.exec(binaryPath);

    if (!reTest) {
      throw new Error(`Unable to parse jar name from ${binaryPath}`);
    }

    let jarName = reTest[2];
    log.debug(`Found jar name: '${jarName}'`);
    return jarName;
  }

  changeState(state) {
    log.debug(`Moving to state '${state}'`);
    this.state = state;
    this.emit(UiAutomator.EVENT_CHANGED, {
      state
    });
  }

  async killUiAutomatorOnDevice() {
    try {
      await this.adb.killProcessesByName('uiautomator');
    } catch (e) {
      log.warn(`Error while killing uiAutomator: ${e}`);
    }
  }

}

exports.UiAutomator = UiAutomator;
UiAutomator.EVENT_ERROR = 'uiautomator_error';
UiAutomator.EVENT_CHANGED = 'stateChanged';
UiAutomator.STATE_STOPPING = 'stopping';
UiAutomator.STATE_STOPPED = 'stopped';
UiAutomator.STATE_STARTING = 'starting';
UiAutomator.STATE_ONLINE = 'online';
var _default = UiAutomator;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG9tYXRvci5qcyJdLCJuYW1lcyI6WyJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJVaUF1dG9tYXRvciIsImV2ZW50cyIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiYWRiIiwiZXJyb3JBbmRUaHJvdyIsInRlbXBQYXRoIiwic3RhcnQiLCJ1aUF1dG9tYXRvckJpbmFyeVBhdGgiLCJjbGFzc05hbWUiLCJzdGFydERldGVjdG9yIiwiZXh0cmFQYXJhbXMiLCJwcm9jZXNzSXNBbGl2ZSIsImRlYnVnIiwiY2hhbmdlU3RhdGUiLCJTVEFURV9TVEFSVElORyIsImphck5hbWUiLCJwYXJzZUphck5hbWVGcm9tUGF0aCIsInB1c2giLCJraWxsVWlBdXRvbWF0b3JPbkRldmljZSIsImFyZ3MiLCJwcm9jIiwiY3JlYXRlU3ViUHJvY2VzcyIsIm9uIiwiY29kZSIsInNpZ25hbCIsInN0YXRlIiwiU1RBVEVfU1RPUFBFRCIsIlNUQVRFX1NUT1BQSU5HIiwibXNnIiwiZXJyb3IiLCJTVEFURV9PTkxJTkUiLCJlIiwiZW1pdCIsIkVWRU5UX0VSUk9SIiwic3RvcCIsInNodXRkb3duIiwiYmluYXJ5UGF0aCIsInJlVGVzdCIsImV4ZWMiLCJFcnJvciIsIkVWRU5UX0NIQU5HRUQiLCJraWxsUHJvY2Vzc2VzQnlOYW1lIiwid2FybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxHQUFHLEdBQUdDLGdCQUFPQyxTQUFQLENBQWlCLGFBQWpCLENBQVo7O0FBRUEsTUFBTUMsV0FBTixTQUEwQkMsZ0JBQU9DLFlBQWpDLENBQThDO0FBQzVDQyxFQUFBQSxXQUFXLENBQUVDLEdBQUYsRUFBTztBQUNoQixRQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNSUCxNQUFBQSxHQUFHLENBQUNRLGFBQUosQ0FBa0IsNENBQWxCO0FBQ0Q7O0FBQ0Q7QUFDQSxTQUFLRCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLRSxRQUFMLEdB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QUExQixDQUFiOztBQUNBLFFBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1gsWUFBTSxJQUFJRSxLQUFKLENBQVcsaUNBQWdDSCxVQUFXLEVBQXRELENBQU47QUFDRDs7QUFDRCxRQUFJckIsT0FBTyxHQUFHc0IsTUFBTSxDQUFDLENBQUQsQ0FBcEI7QUFDQXpDLElBQUFBLEdBQUcsQ0FBQ2dCLEtBQUosQ0FBVyxvQkFBbUJHLE9BQVEsR0FBdEM7QUFDQSxXQUFPQSxPQUFQO0FBQ0Q7O0FBRURGLEVBQUFBLFdBQVcsQ0FBRVksS0FBRixFQUFTO0FBQ2xCN0IsSUFBQUEsR0FBRyxDQUFDZ0IsS0FBSixDQUFXLG9CQUFtQmEsS0FBTSxHQUFwQztBQUNBLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtPLElBQUwsQ0FBVWpDLFdBQVcsQ0FBQ3lDLGFBQXRCLEVBQXFDO0FBQUNmLE1BQUFBO0FBQUQsS0FBckM7QUFDRDs7QUFFNEIsUUFBdkJQLHVCQUF1QixHQUFJO0FBQy9CLFFBQUk7QUFDRixZQUFNLEtBQUtmLEdBQUwsQ0FBU3NDLG1CQUFULENBQTZCLGFBQTdCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT1YsQ0FBUCxFQUFVO0FBQ1ZuQyxNQUFBQSxHQUFHLENBQUM4QyxJQUFKLENBQVUsb0NBQW1DWCxDQUFFLEVBQS9DO0FBQ0Q7QUFDRjs7QUF6RjJDOzs7QUE2RjlDaEMsV0FBVyxDQUFDa0MsV0FBWixHQUEwQixtQkFBMUI7QUFDQWxDLFdBQVcsQ0FBQ3lDLGFBQVosR0FBNEIsY0FBNUI7QUFDQXpDLFdBQVcsQ0FBQzRCLGNBQVosR0FBNkIsVUFBN0I7QUFDQTVCLFdBQVcsQ0FBQzJCLGFBQVosR0FBNEIsU0FBNUI7QUFDQTNCLFdBQVcsQ0FBQ2UsY0FBWixHQUE2QixVQUE3QjtBQUNBZixXQUFXLENBQUMrQixZQUFaLEdBQTJCLFFBQTNCO2VBSWUvQixXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdVaUF1dG9tYXRvcicpO1xuXG5jbGFzcyBVaUF1dG9tYXRvciBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoYWRiKSB7XG4gICAgaWYgKCFhZGIpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KCdhZGIgaXMgcmVxdWlyZWQgdG8gaW5zdGFudGlhdGUgVWlBdXRvbWF0b3InKTtcbiAgICB9XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFkYiA9IGFkYjtcbiAgICB0aGlzLnRlbXBQYXRoID0gJy9kYXRhL2xvY2FsL3RtcC8nO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQgKHVpQXV0b21hdG9yQmluYXJ5UGF0aCwgY2xhc3NOYW1lLCBzdGFydERldGVjdG9yLCAuLi5leHRyYVBhcmFtcykge1xuICAgIGxldCBwcm9jZXNzSXNBbGl2ZTtcbiAgICB0cnkge1xuICAgICAgbG9nLmRlYnVnKCdTdGFydGluZyBVaUF1dG9tYXRvcicpO1xuICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShVaUF1dG9tYXRvci5TVEFURV9TVEFSVElORyk7XG5cbiAgICAgIGxvZy5kZWJ1ZygnUGFyc2luZyB1aWF1dG9tYXRvciBqYXInKTtcbiAgICAgIC8vIGV4cGVjdGluZyBhIHBhdGggbGlrZSAvYWRzL2Fkcy9mb28uamFyIG9yIFxcYXNkXFxhc2RcXGZvby5qYXJcbiAgICAgIGxldCBqYXJOYW1lID0gdGhpcy5wYXJzZUphck5hbWVGcm9tUGF0aCh1aUF1dG9tYXRvckJpbmFyeVBhdGgpO1xuICAgICAgYXdhaXQgdGhpcy5hZGIucHVzaCh1aUF1dG9tYXRvckJpbmFyeVBhdGgsIHRoaXMudGVtcFBhdGgpO1xuXG4gICAgICAvLyBraWxsaW5nIGFueSB1aWF1dG9tYXRvciBleGlzdGluZyBwcm9jZXNzZXNcbiAgICAgIGF3YWl0IHRoaXMua2lsbFVpQXV0b21hdG9yT25EZXZpY2UoKTtcblxuICAgICAgbG9nLmRlYnVnKCdTdGFydGluZyBVSUF1dG9tYXRvcicpO1xuICAgICAgbGV0IGFyZ3MgPSBbJ3NoZWxsJywgJ3VpYXV0b21hdG9yJywgJ3J1bnRlc3QnLCBqYXJOYW1lLCAnLWMnLCBjbGFzc05hbWUsIC4uLmV4dHJhUGFyYW1zXTtcbiAgICAgIHRoaXMucHJvYyA9IHRoaXMuYWRiLmNyZWF0ZVN1YlByb2Nlc3MoYXJncyk7XG5cbiAgICAgIC8vIGhhbmRsZSBvdXQtb2YtYm91bmQgZXhpdCBieSBzaW1wbHkgZW1pdHRpbmcgYSBzdG9wcGVkIHN0YXRlXG4gICAgICB0aGlzLnByb2Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICAgIHByb2Nlc3NJc0FsaXZlID0gZmFsc2U7XG4gICAgICAgIC8vIGNsZWFudXBcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQRUQgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgIT09IFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQSU5HKSB7XG4gICAgICAgICAgbGV0IG1zZyA9IGBVaUF1dG9tYXRvciBleGl0ZWQgdW5leHBlY3RlZGx5IHdpdGggY29kZSAke2NvZGV9LCBgICtcbiAgICAgICAgICAgICAgICAgICAgYHNpZ25hbCAke3NpZ25hbH1gO1xuICAgICAgICAgIGxvZy5lcnJvcihtc2cpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQSU5HKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdVaUF1dG9tYXRvciBzaHV0IGRvd24gbm9ybWFsbHknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQRUQpO1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHRoaXMucHJvYy5zdGFydChzdGFydERldGVjdG9yKTtcbiAgICAgIHByb2Nlc3NJc0FsaXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoVWlBdXRvbWF0b3IuU1RBVEVfT05MSU5FKTtcbiAgICAgIHJldHVybiB0aGlzLnByb2M7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5lbWl0KFVpQXV0b21hdG9yLkVWRU5UX0VSUk9SLCBlKTtcbiAgICAgIGlmIChwcm9jZXNzSXNBbGl2ZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmtpbGxVaUF1dG9tYXRvck9uRGV2aWNlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCk7XG4gICAgICB9XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzaHV0ZG93biAoKSB7XG4gICAgbG9nLmRlYnVnKCdTaHV0dGluZyBkb3duIFVpQXV0b21hdG9yJyk7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09IFVpQXV0b21hdG9yLlNUQVRFX1NUT1BQRUQpIHtcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoVWlBdXRvbWF0b3IuU1RBVEVfU1RPUFBJTkcpO1xuICAgICAgYXdhaXQgdGhpcy5wcm9jLnN0b3AoKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5raWxsVWlBdXRvbWF0b3JPbkRldmljZSgpO1xuICAgIHRoaXMuY2hhbmdlU3RhdGUoVWlBdXRvbWF0b3IuU1RBVEVfU1RPUFBFRCk7XG4gIH1cblxuICBwYXJzZUphck5hbWVGcm9tUGF0aCAoYmluYXJ5UGF0aCkge1xuICAgIGxldCByZVRlc3QgPSAvLiooXFwvfFxcXFwpKC4qXFwuamFyKS8uZXhlYyhiaW5hcnlQYXRoKTtcbiAgICBpZiAoIXJlVGVzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcGFyc2UgamFyIG5hbWUgZnJvbSAke2JpbmFyeVBhdGh9YCk7XG4gICAgfVxuICAgIGxldCBqYXJOYW1lID0gcmVUZXN0WzJdO1xuICAgIGxvZy5kZWJ1ZyhgRm91bmQgamFyIG5hbWU6ICcke2phck5hbWV9J2ApO1xuICAgIHJldHVybiBqYXJOYW1lO1xuICB9XG5cbiAgY2hhbmdlU3RhdGUgKHN0YXRlKSB7XG4gICAgbG9nLmRlYnVnKGBNb3ZpbmcgdG8gc3RhdGUgJyR7c3RhdGV9J2ApO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLmVtaXQoVWlBdXRvbWF0b3IuRVZFTlRfQ0hBTkdFRCwge3N0YXRlfSk7XG4gIH1cblxuICBhc3luYyBraWxsVWlBdXRvbWF0b3JPbkRldmljZSAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLmtpbGxQcm9jZXNzZXNCeU5hbWUoJ3VpYXV0b21hdG9yJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLndhcm4oYEVycm9yIHdoaWxlIGtpbGxpbmcgdWlBdXRvbWF0b3I6ICR7ZX1gKTtcbiAgICB9XG4gIH1cblxufVxuXG5VaUF1dG9tYXRvci5FVkVOVF9FUlJPUiA9ICd1aWF1dG9tYXRvcl9lcnJvcic7XG5VaUF1dG9tYXRvci5FVkVOVF9DSEFOR0VEID0gJ3N0YXRlQ2hhbmdlZCc7XG5VaUF1dG9tYXRvci5TVEFURV9TVE9QUElORyA9ICdzdG9wcGluZyc7XG5VaUF1dG9tYXRvci5TVEFURV9TVE9QUEVEID0gJ3N0b3BwZWQnO1xuVWlBdXRvbWF0b3IuU1RBVEVfU1RBUlRJTkcgPSAnc3RhcnRpbmcnO1xuVWlBdXRvbWF0b3IuU1RBVEVfT05MSU5FID0gJ29ubGluZSc7XG5cblxuZXhwb3J0IHsgVWlBdXRvbWF0b3IgfTtcbmV4cG9ydCBkZWZhdWx0IFVpQXV0b21hdG9yO1xuIl0sImZpbGUiOiJsaWIvdWlhdXRvbWF0b3IuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
