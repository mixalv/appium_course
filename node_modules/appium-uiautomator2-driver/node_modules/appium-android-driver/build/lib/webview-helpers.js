"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.WEBVIEW_WIN = exports.WEBVIEW_BASE = exports.NATIVE_WIN = exports.KNOWN_CHROME_PACKAGE_NAMES = exports.CHROMIUM_WIN = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _axios = _interopRequireDefault(require("axios"));

var _support = require("@appium/support");

var _portscanner = require("portscanner");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const CHROMIUM_WIN = 'CHROMIUM';
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_PID_PATTERN = new RegExp(`^${WEBVIEW_BASE}(\\d+)`);
const WEBVIEW_PKG_PATTERN = new RegExp(`^${WEBVIEW_BASE}([^\\d\\s][\\w.]*)`);
const DEVTOOLS_SOCKET_PATTERN = /@[\w.]+_devtools_remote_?(\d+)?\b/;
const CROSSWALK_SOCKET_PATTERN = /@([\w.]+)_devtools_remote\b/;
const CHROMIUM_DEVTOOLS_SOCKET = 'chrome_devtools_remote';
const CHROME_PACKAGE_NAME = 'com.android.chrome';
const KNOWN_CHROME_PACKAGE_NAMES = [CHROME_PACKAGE_NAME, 'com.chrome.beta', 'com.chrome.dev', 'com.chrome.canary'];
exports.KNOWN_CHROME_PACKAGE_NAMES = KNOWN_CHROME_PACKAGE_NAMES;
const DEVTOOLS_PORTS_RANGE = [10900, 11000];
const WEBVIEWS_DETAILS_CACHE = new _lruCache.default({
  max: 100,
  updateAgeOnGet: true
});
const CDP_REQ_TIMEOUT = 2000;

const DEVTOOLS_PORT_ALLOCATION_GUARD = _support.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'android_devtools_port_guard'), {
  timeout: 7,
  tryRecovery: true
});

const helpers = {};
exports.helpers = helpers;

function toDetailsCacheKey(adb, webview) {
  return `${adb === null || adb === void 0 ? void 0 : adb.curDeviceId}:${webview}`;
}

async function getPotentialWebviewProcs(adb) {
  const out = await adb.shell(['cat', '/proc/net/unix']);
  const names = [];
  const allMatches = [];

  for (const line of out.split('\n')) {
    const [,,, flags,, st,, sockPath] = line.trim().split(/\s+/);

    if (!sockPath) {
      continue;
    }

    if (sockPath.startsWith('@')) {
      allMatches.push(line.trim());
    }

    if (flags !== '00010000' || st !== '01') {
      continue;
    }

    if (!DEVTOOLS_SOCKET_PATTERN.test(sockPath)) {
      continue;
    }

    names.push(sockPath);
  }

  if (_lodash.default.isEmpty(names)) {
    _logger.default.debug('Found no active devtools sockets');

    if (!_lodash.default.isEmpty(allMatches)) {
      _logger.default.debug(`Other sockets are: ${JSON.stringify(allMatches, null, 2)}`);
    }
  } else {
    _logger.default.debug(`Parsed ${names.length} active devtools ${_support.util.pluralize('socket', names.length, false)}: ` + JSON.stringify(names));
  }

  return _lodash.default.uniq(names);
}

async function webviewsFromProcs(adb, deviceSocket = null) {
  const socketNames = await getPotentialWebviewProcs(adb);
  const webviews = [];

  for (const socketName of socketNames) {
    if (deviceSocket === CHROMIUM_DEVTOOLS_SOCKET && socketName === `@${deviceSocket}`) {
      webviews.push({
        proc: socketName,
        webview: CHROMIUM_WIN
      });
      continue;
    }

    const socketNameMatch = DEVTOOLS_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch) {
      continue;
    }

    const crosswalkMatch = CROSSWALK_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch[1] && !crosswalkMatch) {
      continue;
    }

    if (deviceSocket && socketName === `@${deviceSocket}` || !deviceSocket) {
      webviews.push({
        proc: socketName,
        webview: socketNameMatch[1] ? `${WEBVIEW_BASE}${socketNameMatch[1]}` : `${WEBVIEW_BASE}${crosswalkMatch[1]}`
      });
    }
  }

  return webviews;
}

async function allocateDevtoolsPort(adb, socketName, webviewDevtoolsPort = null) {
  const remotePort = socketName.replace(/^@/, '');
  let [startPort, endPort] = DEVTOOLS_PORTS_RANGE;

  if (webviewDevtoolsPort) {
    endPort = webviewDevtoolsPort + (endPort - startPort);
    startPort = webviewDevtoolsPort;
  }

  _logger.default.debug(`Forwarding remote port ${remotePort} to a local ` + `port in range ${startPort}..${endPort}`);

  if (!webviewDevtoolsPort) {
    _logger.default.debug(`You could use the 'webviewDevtoolsPort' capability to customize ` + `the starting port number`);
  }

  return await DEVTOOLS_PORT_ALLOCATION_GUARD(async () => {
    let localPort;

    try {
      localPort = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
    } catch (e) {
      throw new Error(`Cannot find any free port to forward the Devtools socket ` + `in range ${startPort}..${endPort}. You could set the starting port number ` + `manually by providing the 'webviewDevtoolsPort' capability`);
    }

    await adb.adbExec(['forward', `tcp:${localPort}`, `localabstract:${remotePort}`]);
    return localPort;
  });
}

async function collectWebviewsDetails(adb, webviewsMapping, opts = {}) {
  if (_lodash.default.isEmpty(webviewsMapping)) {
    return;
  }

  const {
    webviewDevtoolsPort = null,
    ensureWebviewsHavePages = null,
    enableWebviewDetailsCollection = null
  } = opts;

  if (!ensureWebviewsHavePages) {
    _logger.default.info(`Not checking whether webviews have active pages; use the ` + `'ensureWebviewsHavePages' cap to turn this check on`);
  }

  if (!enableWebviewDetailsCollection) {
    _logger.default.info(`Not collecting web view details. Details collection might help ` + `to make Chromedriver initialization more precise. Use the 'enableWebviewDetailsCollection' ` + `cap to turn it on`);
  }

  if (!ensureWebviewsHavePages && !enableWebviewDetailsCollection) {
    return;
  }

  _logger.default.debug(`Collecting CDP data of ${_support.util.pluralize('webview', webviewsMapping.length, true)}`);

  const detailCollectors = [];

  for (const item of webviewsMapping) {
    detailCollectors.push((async () => {
      let localPort;

      try {
        localPort = await allocateDevtoolsPort(adb, item.proc, webviewDevtoolsPort);

        if (enableWebviewDetailsCollection) {
          item.info = await cdpInfo(localPort);
        }

        if (ensureWebviewsHavePages) {
          item.pages = await cdpList(localPort);
        }
      } catch (e) {
        _logger.default.debug(e);
      } finally {
        if (localPort) {
          await adb.removePortForward(localPort);
        }
      }
    })());
  }

  await _bluebird.default.all(detailCollectors);

  _logger.default.debug(`CDP data collection completed`);
}

async function cdpList(localPort) {
  return (await (0, _axios.default)({
    url: `http://127.0.0.1:${localPort}/json/list`,
    timeout: CDP_REQ_TIMEOUT
  })).data;
}

async function cdpInfo(localPort) {
  return (await (0, _axios.default)({
    url: `http://127.0.0.1:${localPort}/json/version`,
    timeout: CDP_REQ_TIMEOUT
  })).data;
}

helpers.procFromWebview = async function procFromWebview(adb, webview) {
  const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);

  if (!pidMatch) {
    throw new Error(`Could not find PID for webview '${webview}'`);
  }

  const pid = pidMatch[1];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug(`Getting process name for webview '${webview}'`);

  const pkg = await adb.getNameByPid(pid);

  _logger.default.debug(`Got process name: '${pkg}'`);

  return pkg;
};

helpers.parseWebviewNames = function parseWebviewNames(webviewsMapping, {
  ensureWebviewsHavePages = true,
  isChromeSession = false
} = {}) {
  if (isChromeSession) {
    return [CHROMIUM_WIN];
  }

  const result = [];

  for (const {
    webview,
    pages,
    proc,
    webviewName
  } of webviewsMapping) {
    if (ensureWebviewsHavePages && (pages === null || pages === void 0 ? void 0 : pages.length) === 0) {
      _logger.default.info(`Skipping the webview '${webview}' at '${proc}' ` + `since it has reported having zero pages`);

      continue;
    }

    if (webviewName) {
      result.push(webviewName);
    }
  }

  _logger.default.debug(`Found ${_support.util.pluralize('webview', result.length, true)}: ${JSON.stringify(result)}`);

  return result;
};

helpers.getWebViewsMapping = async function getWebViewsMapping(adb, {
  androidDeviceSocket = null,
  ensureWebviewsHavePages = true,
  webviewDevtoolsPort = null,
  enableWebviewDetailsCollection = true,
  isChromeSession = false
} = {}) {
  if (isChromeSession) {
    return [];
  }

  _logger.default.debug('Getting a list of available webviews');

  const webviewsMapping = await webviewsFromProcs(adb, androidDeviceSocket);
  await collectWebviewsDetails(adb, webviewsMapping, {
    ensureWebviewsHavePages,
    enableWebviewDetailsCollection,
    webviewDevtoolsPort
  });

  for (const webviewMapping of webviewsMapping) {
    const {
      webview,
      info
    } = webviewMapping;
    webviewMapping.webviewName = null;
    let wvName = webview;
    let process = undefined;

    if (!androidDeviceSocket) {
      const pkgMatch = WEBVIEW_PKG_PATTERN.exec(webview);

      try {
        const pkg = pkgMatch ? pkgMatch[1] : await helpers.procFromWebview(adb, webview);
        wvName = `${WEBVIEW_BASE}${pkg}`;
        const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);
        process = {
          name: pkg,
          id: pidMatch ? pidMatch[1] : null
        };
      } catch (e) {
        _logger.default.warn(e.message);

        continue;
      }
    }

    webviewMapping.webviewName = wvName;
    const key = toDetailsCacheKey(adb, wvName);

    if (info || process) {
      WEBVIEWS_DETAILS_CACHE.set(key, {
        info,
        process
      });
    } else if (WEBVIEWS_DETAILS_CACHE.has(key)) {
      WEBVIEWS_DETAILS_CACHE.del(key);
    }
  }

  return webviewsMapping;
};

helpers.getWebviewDetails = function getWebviewDetails(adb, webview) {
  const key = toDetailsCacheKey(adb, webview);
  return WEBVIEWS_DETAILS_CACHE.get(key);
};

helpers.createChromedriverCaps = function createChromedriverCaps(opts, deviceId, webViewDetails) {
  var _opts$chromeOptions, _webViewDetails$info, _webViewDetails$proce, _webViewDetails$proce2, _opts$chromeOptions2;

  const caps = {
    chromeOptions: {}
  };
  const androidPackage = ((_opts$chromeOptions = opts.chromeOptions) === null || _opts$chromeOptions === void 0 ? void 0 : _opts$chromeOptions.androidPackage) || opts.appPackage || (webViewDetails === null || webViewDetails === void 0 ? void 0 : (_webViewDetails$info = webViewDetails.info) === null || _webViewDetails$info === void 0 ? void 0 : _webViewDetails$info['Android-Package']);

  if (androidPackage) {
    caps.chromeOptions.androidPackage = androidPackage;
  }

  if (_lodash.default.isBoolean(opts.chromeUseRunningApp)) {
    caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;
  }

  if (opts.chromeAndroidPackage) {
    caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;
  }

  if (opts.chromeAndroidActivity) {
    caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;
  }

  if (opts.chromeAndroidProcess) {
    caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;
  } else if (webViewDetails !== null && webViewDetails !== void 0 && (_webViewDetails$proce = webViewDetails.process) !== null && _webViewDetails$proce !== void 0 && _webViewDetails$proce.name && webViewDetails !== null && webViewDetails !== void 0 && (_webViewDetails$proce2 = webViewDetails.process) !== null && _webViewDetails$proce2 !== void 0 && _webViewDetails$proce2.id) {
    caps.chromeOptions.androidProcess = webViewDetails.process.name;
  }

  if (_lodash.default.toLower(opts.browserName) === 'chromium-webview') {
    caps.chromeOptions.androidActivity = opts.appActivity;
  }

  if (opts.pageLoadStrategy) {
    caps.pageLoadStrategy = opts.pageLoadStrategy;
  }

  const isChrome = _lodash.default.toLower(caps.chromeOptions.androidPackage) === 'chrome';

  if (_lodash.default.includes(KNOWN_CHROME_PACKAGE_NAMES, caps.chromeOptions.androidPackage) || isChrome) {
    if (isChrome) {
      caps.chromeOptions.androidPackage = CHROME_PACKAGE_NAME;
    }

    delete caps.chromeOptions.androidActivity;
    delete caps.chromeOptions.androidProcess;
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;

  if (_lodash.default.isPlainObject(opts.loggingPrefs) || _lodash.default.isPlainObject(opts.chromeLoggingPrefs)) {
    if (opts.loggingPrefs) {
      _logger.default.warn(`The 'loggingPrefs' cap is deprecated; use the 'chromeLoggingPrefs' cap instead`);
    }

    caps.loggingPrefs = opts.chromeLoggingPrefs || opts.loggingPrefs;
  }

  if (opts.enablePerformanceLogging) {
    _logger.default.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` + `the 'chromeLoggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);

    const newPref = {
      performance: 'ALL'
    };
    caps.loggingPrefs = caps.loggingPrefs ? Object.assign({}, caps.loggingPrefs, newPref) : newPref;
  }

  if ((_opts$chromeOptions2 = opts.chromeOptions) !== null && _opts$chromeOptions2 !== void 0 && _opts$chromeOptions2.Arguments) {
    opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
    delete opts.chromeOptions.Arguments;
  }

  _logger.default.debug('Precalculated Chromedriver capabilities: ' + JSON.stringify(caps.chromeOptions, null, 2));

  const protectedCapNames = [];

  for (const [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
    if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
      caps.chromeOptions[opt] = val;
    } else {
      protectedCapNames.push(opt);
    }
  }

  if (!_lodash.default.isEmpty(protectedCapNames)) {
    _logger.default.info('The following Chromedriver capabilities cannot be overridden ' + 'by the provided chromeOptions:');

    for (const optName of protectedCapNames) {
      _logger.default.info(`  ${optName} (${JSON.stringify(opts.chromeOptions[optName])})`);
    }
  }

  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJ2aWV3LWhlbHBlcnMuanMiXSwibmFtZXMiOlsiTkFUSVZFX1dJTiIsIldFQlZJRVdfV0lOIiwiQ0hST01JVU1fV0lOIiwiV0VCVklFV19CQVNFIiwiV0VCVklFV19QSURfUEFUVEVSTiIsIlJlZ0V4cCIsIldFQlZJRVdfUEtHX1BBVFRFUk4iLCJERVZUT09MU19TT0NLRVRfUEFUVEVSTiIsIkNST1NTV0FMS19TT0NLRVRfUEFUVEVSTiIsIkNIUk9NSVVNX0RFVlRPT0xTX1NPQ0tFVCIsIkNIUk9NRV9QQUNLQUdFX05BTUUiLCJLTk9XTl9DSFJPTUVfUEFDS0FHRV9OQU1FUyIsIkRFVlRPT0xTX1BPUlRTX1JBTkdFIiwiV0VCVklFV1NfREVUQUlMU19DQUNIRSIsIkxSVSIsIm1heCIsInVwZGF0ZUFnZU9uR2V0IiwiQ0RQX1JFUV9USU1FT1VUIiwiREVWVE9PTFNfUE9SVF9BTExPQ0FUSU9OX0dVQVJEIiwidXRpbCIsImdldExvY2tGaWxlR3VhcmQiLCJwYXRoIiwicmVzb2x2ZSIsIm9zIiwidG1wZGlyIiwidGltZW91dCIsInRyeVJlY292ZXJ5IiwiaGVscGVycyIsInRvRGV0YWlsc0NhY2hlS2V5IiwiYWRiIiwid2VidmlldyIsImN1ckRldmljZUlkIiwiZ2V0UG90ZW50aWFsV2Vidmlld1Byb2NzIiwib3V0Iiwic2hlbGwiLCJuYW1lcyIsImFsbE1hdGNoZXMiLCJsaW5lIiwic3BsaXQiLCJmbGFncyIsInN0Iiwic29ja1BhdGgiLCJ0cmltIiwic3RhcnRzV2l0aCIsInB1c2giLCJ0ZXN0IiwiXyIsImlzRW1wdHkiLCJsb2dnZXIiLCJkZWJ1ZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZW5ndGgiLCJwbHVyYWxpemUiLCJ1bmlxIiwid2Vidmlld3NGcm9tUHJvY3MiLCJkZXZpY2VTb2NrZXQiLCJzb2NrZXROYW1lcyIsIndlYnZpZXdzIiwic29ja2V0TmFtZSIsInByb2MiLCJzb2NrZXROYW1lTWF0Y2giLCJleGVjIiwiY3Jvc3N3YWxrTWF0Y2giLCJhbGxvY2F0ZURldnRvb2xzUG9ydCIsIndlYnZpZXdEZXZ0b29sc1BvcnQiLCJyZW1vdGVQb3J0IiwicmVwbGFjZSIsInN0YXJ0UG9ydCIsImVuZFBvcnQiLCJsb2NhbFBvcnQiLCJlIiwiRXJyb3IiLCJhZGJFeGVjIiwiY29sbGVjdFdlYnZpZXdzRGV0YWlscyIsIndlYnZpZXdzTWFwcGluZyIsIm9wdHMiLCJlbnN1cmVXZWJ2aWV3c0hhdmVQYWdlcyIsImVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbiIsImluZm8iLCJkZXRhaWxDb2xsZWN0b3JzIiwiaXRlbSIsImNkcEluZm8iLCJwYWdlcyIsImNkcExpc3QiLCJyZW1vdmVQb3J0Rm9yd2FyZCIsIkIiLCJhbGwiLCJ1cmwiLCJkYXRhIiwicHJvY0Zyb21XZWJ2aWV3IiwicGlkTWF0Y2giLCJwaWQiLCJwa2ciLCJnZXROYW1lQnlQaWQiLCJwYXJzZVdlYnZpZXdOYW1lcyIsImlzQ2hyb21lU2Vzc2lvbiIsInJlc3VsdCIsIndlYnZpZXdOYW1lIiwiZ2V0V2ViVmlld3NNYXBwaW5nIiwiYW5kcm9pZERldmljZVNvY2tldCIsIndlYnZpZXdNYXBwaW5nIiwid3ZOYW1lIiwicHJvY2VzcyIsInVuZGVmaW5lZCIsInBrZ01hdGNoIiwibmFtZSIsImlkIiwid2FybiIsIm1lc3NhZ2UiLCJrZXkiLCJzZXQiLCJoYXMiLCJkZWwiLCJnZXRXZWJ2aWV3RGV0YWlscyIsImdldCIsImNyZWF0ZUNocm9tZWRyaXZlckNhcHMiLCJkZXZpY2VJZCIsIndlYlZpZXdEZXRhaWxzIiwiY2FwcyIsImNocm9tZU9wdGlvbnMiLCJhbmRyb2lkUGFja2FnZSIsImFwcFBhY2thZ2UiLCJpc0Jvb2xlYW4iLCJjaHJvbWVVc2VSdW5uaW5nQXBwIiwiYW5kcm9pZFVzZVJ1bm5pbmdBcHAiLCJjaHJvbWVBbmRyb2lkUGFja2FnZSIsImNocm9tZUFuZHJvaWRBY3Rpdml0eSIsImFuZHJvaWRBY3Rpdml0eSIsImNocm9tZUFuZHJvaWRQcm9jZXNzIiwiYW5kcm9pZFByb2Nlc3MiLCJ0b0xvd2VyIiwiYnJvd3Nlck5hbWUiLCJhcHBBY3Rpdml0eSIsInBhZ2VMb2FkU3RyYXRlZ3kiLCJpc0Nocm9tZSIsImluY2x1ZGVzIiwiYW5kcm9pZERldmljZVNlcmlhbCIsImlzUGxhaW5PYmplY3QiLCJsb2dnaW5nUHJlZnMiLCJjaHJvbWVMb2dnaW5nUHJlZnMiLCJlbmFibGVQZXJmb3JtYW5jZUxvZ2dpbmciLCJuZXdQcmVmIiwicGVyZm9ybWFuY2UiLCJPYmplY3QiLCJhc3NpZ24iLCJBcmd1bWVudHMiLCJhcmdzIiwicHJvdGVjdGVkQ2FwTmFtZXMiLCJvcHQiLCJ2YWwiLCJ0b1BhaXJzIiwiaXNVbmRlZmluZWQiLCJvcHROYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBRyxZQUFuQjs7QUFDQSxNQUFNQyxXQUFXLEdBQUcsU0FBcEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLFVBQXJCOztBQUNBLE1BQU1DLFlBQVksR0FBSSxHQUFFRixXQUFZLEdBQXBDOztBQUNBLE1BQU1HLG1CQUFtQixHQUFHLElBQUlDLE1BQUosQ0FBWSxJQUFHRixZQUFhLFFBQTVCLENBQTVCO0FBQ0EsTUFBTUcsbUJBQW1CLEdBQUcsSUFBSUQsTUFBSixDQUFZLElBQUdGLFlBQWEsb0JBQTVCLENBQTVCO0FBQ0EsTUFBTUksdUJBQXVCLEdBQUcsbUNBQWhDO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsNkJBQWpDO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsd0JBQWpDO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsb0JBQTVCO0FBQ0EsTUFBTUMsMEJBQTBCLEdBQUcsQ0FDakNELG1CQURpQyxFQUVqQyxpQkFGaUMsRUFHakMsZ0JBSGlDLEVBSWpDLG1CQUppQyxDQUFuQzs7QUFNQSxNQUFNRSxvQkFBb0IsR0FBRyxDQUFDLEtBQUQsRUFBUSxLQUFSLENBQTdCO0FBQ0EsTUFB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Q0MsR0FBRCxFQUFNQyxHQUFOLENBQVgsSUFBeUJ4RyxnQkFBRXlHLE9BQUYsQ0FBVTNFLElBQUksQ0FBQzRDLGFBQWYsQ0FBekIsRUFBd0Q7QUFDdEQsUUFBSTFFLGdCQUFFMEcsV0FBRixDQUFjakMsSUFBSSxDQUFDQyxhQUFMLENBQW1CNkIsR0FBbkIsQ0FBZCxDQUFKLEVBQTRDO0FBQzFDOUIsTUFBQUEsSUFBSSxDQUFDQyxhQUFMLENBQW1CNkIsR0FBbkIsSUFBMEJDLEdBQTFCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xGLE1BQUFBLGlCQUFpQixDQUFDeEcsSUFBbEIsQ0FBdUJ5RyxHQUF2QjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSSxDQUFDdkcsZ0JBQUVDLE9BQUYsQ0FBVXFHLGlCQUFWLENBQUwsRUFBbUM7QUFDakNwRyxvQkFBTytCLElBQVAsQ0FBWSxrRUFDVixnQ0FERjs7QUFFQSxTQUFLLE1BQU0wRSxPQUFYLElBQXNCTCxpQkFBdEIsRUFBeUM7QUFDdkNwRyxzQkFBTytCLElBQVAsQ0FBYSxLQUFJMEUsT0FBUSxLQUFJdkcsSUFBSSxDQUFDQyxTQUFMLENBQWV5QixJQUFJLENBQUM0QyxhQUFMLENBQW1CaUMsT0FBbkIsQ0FBZixDQUE0QyxHQUF6RTtBQUNEO0FBQ0Y7O0FBRUQsU0FBT2xDLElBQVA7QUFDRCxDQXRGRDs7ZUF3RmU1RixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZmluZEFQb3J0Tm90SW5Vc2UgfSBmcm9tICdwb3J0c2Nhbm5lcic7XG5pbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmNvbnN0IE5BVElWRV9XSU4gPSAnTkFUSVZFX0FQUCc7XG5jb25zdCBXRUJWSUVXX1dJTiA9ICdXRUJWSUVXJztcbmNvbnN0IENIUk9NSVVNX1dJTiA9ICdDSFJPTUlVTSc7XG5jb25zdCBXRUJWSUVXX0JBU0UgPSBgJHtXRUJWSUVXX1dJTn1fYDtcbmNvbnN0IFdFQlZJRVdfUElEX1BBVFRFUk4gPSBuZXcgUmVnRXhwKGBeJHtXRUJWSUVXX0JBU0V9KFxcXFxkKylgKTtcbmNvbnN0IFdFQlZJRVdfUEtHX1BBVFRFUk4gPSBuZXcgUmVnRXhwKGBeJHtXRUJWSUVXX0JBU0V9KFteXFxcXGRcXFxcc11bXFxcXHcuXSopYCk7XG5jb25zdCBERVZUT09MU19TT0NLRVRfUEFUVEVSTiA9IC9AW1xcdy5dK19kZXZ0b29sc19yZW1vdGVfPyhcXGQrKT9cXGIvO1xuY29uc3QgQ1JPU1NXQUxLX1NPQ0tFVF9QQVRURVJOID0gL0AoW1xcdy5dKylfZGV2dG9vbHNfcmVtb3RlXFxiLztcbmNvbnN0IENIUk9NSVVNX0RFVlRPT0xTX1NPQ0tFVCA9ICdjaHJvbWVfZGV2dG9vbHNfcmVtb3RlJztcbmNvbnN0IENIUk9NRV9QQUNLQUdFX05BTUUgPSAnY29tLmFuZHJvaWQuY2hyb21lJztcbmNvbnN0IEtOT1dOX0NIUk9NRV9QQUNLQUdFX05BTUVTID0gW1xuICBDSFJPTUVfUEFDS0FHRV9OQU1FLFxuICAnY29tLmNocm9tZS5iZXRhJyxcbiAgJ2NvbS5jaHJvbWUuZGV2JyxcbiAgJ2NvbS5jaHJvbWUuY2FuYXJ5Jyxcbl07XG5jb25zdCBERVZUT09MU19QT1JUU19SQU5HRSA9IFsxMDkwMCwgMTEwMDBdO1xuY29uc3QgV0VCVklFV1NfREVUQUlMU19DQUNIRSA9IG5ldyBMUlUoe1xuICBtYXg6IDEwMCxcbiAgdXBkYXRlQWdlT25HZXQ6IHRydWUsXG59KTtcbmNvbnN0IENEUF9SRVFfVElNRU9VVCA9IDIwMDA7IC8vIG1zXG5jb25zdCBERVZUT09MU19QT1JUX0FMTE9DQVRJT05fR1VBUkQgPSB1dGlsLmdldExvY2tGaWxlR3VhcmQoXG4gIHBhdGgucmVzb2x2ZShvcy50bXBkaXIoKSwgJ2FuZHJvaWRfZGV2dG9vbHNfcG9ydF9ndWFyZCcpLFxuICB7dGltZW91dDogNywgdHJ5UmVjb3Zlcnk6IHRydWV9XG4pO1xuXG5jb25zdCBoZWxwZXJzID0ge307XG5cbmZ1bmN0aW9uIHRvRGV0YWlsc0NhY2hlS2V5IChhZGIsIHdlYnZpZXcpIHtcbiAgcmV0dXJuIGAke2FkYj8uY3VyRGV2aWNlSWR9OiR7d2Vidmlld31gO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gZ2V0cyBhIGxpc3Qgb2YgYW5kcm9pZCBzeXN0ZW0gcHJvY2Vzc2VzIGFuZCByZXR1cm5zIG9uZXNcbiAqIHRoYXQgbG9vayBsaWtlIHdlYnZpZXdzXG4gKiBTZWUgaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2Nocm9tZS9icm93c2VyL2RldnRvb2xzL2RldmljZS9hbmRyb2lkX2RldmljZV9pbmZvX3F1ZXJ5LmNjXG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGFkYiAtIGFuIEFEQiBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSAtIGEgbGlzdCBvZiBtYXRjaGluZyB3ZWJ2aWV3IHNvY2tldCBuYW1lcyAoaW5jbHVkaW5nIHRoZSBsZWFkaW5nICdAJylcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UG90ZW50aWFsV2Vidmlld1Byb2NzIChhZGIpIHtcbiAgY29uc3Qgb3V0ID0gYXdhaXQgYWRiLnNoZWxsKFsnY2F0JywgJy9wcm9jL25ldC91bml4J10pO1xuICBjb25zdCBuYW1lcyA9IFtdO1xuICBjb25zdCBhbGxNYXRjaGVzID0gW107XG4gIGZvciAoY29uc3QgbGluZSBvZiBvdXQuc3BsaXQoJ1xcbicpKSB7XG4gICAgLy8gTnVtIFJlZkNvdW50IFByb3RvY29sIEZsYWdzIFR5cGUgU3QgSW5vZGUgUGF0aFxuICAgIGNvbnN0IFssLCwgZmxhZ3MsLCBzdCwsIHNvY2tQYXRoXSA9IGxpbmUudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gICAgaWYgKCFzb2NrUGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChzb2NrUGF0aC5zdGFydHNXaXRoKCdAJykpIHtcbiAgICAgIGFsbE1hdGNoZXMucHVzaChsaW5lLnRyaW0oKSk7XG4gICAgfVxuICAgIGlmIChmbGFncyAhPT0gJzAwMDEwMDAwJyB8fCBzdCAhPT0gJzAxJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghREVWVE9PTFNfU09DS0VUX1BBVFRFUk4udGVzdChzb2NrUGF0aCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIG5hbWVzLnB1c2goc29ja1BhdGgpO1xuICB9XG4gIGlmIChfLmlzRW1wdHkobmFtZXMpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdGb3VuZCBubyBhY3RpdmUgZGV2dG9vbHMgc29ja2V0cycpO1xuICAgIGlmICghXy5pc0VtcHR5KGFsbE1hdGNoZXMpKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYE90aGVyIHNvY2tldHMgYXJlOiAke0pTT04uc3RyaW5naWZ5KGFsbE1hdGNoZXMsIG51bGwsIDIpfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIuZGVidWcoYFBhcnNlZCAke25hbWVzLmxlbmd0aH0gYWN0aXZlIGRldnRvb2xzICR7dXRpbC5wbHVyYWxpemUoJ3NvY2tldCcsIG5hbWVzLmxlbmd0aCwgZmFsc2UpfTogYCArXG4gICAgICBKU09OLnN0cmluZ2lmeShuYW1lcykpO1xuICB9XG4gIC8vIHNvbWV0aW1lcyB0aGUgd2VidmlldyBwcm9jZXNzIHNob3dzIHVwIG11bHRpcGxlIHRpbWVzIHBlciBhcHBcbiAgcmV0dXJuIF8udW5pcShuYW1lcyk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gV2Vidmlld1Byb2NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcm9jIC0gVGhlIHdlYnZpZXcgcHJvY2VzcyBuYW1lIChhcyByZXR1cm5lZCBieVxuICogZ2V0UG90ZW50aWFsV2Vidmlld1Byb2NzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gd2VidmlldyAtIFRoZSBhY3R1YWwgd2VidmlldyBjb250ZXh0IG5hbWVcbiAqL1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHJpZXZlcyBhIGxpc3Qgb2Ygc3lzdGVtIHByb2Nlc3NlcyB0aGF0IGxvb2sgbGlrZSB3ZWJ2aWV3cyxcbiAqIGFuZCByZXR1cm5zIHRoZW0gYWxvbmcgd2l0aCB0aGUgd2VidmlldyBjb250ZXh0IG5hbWUgYXBwcm9wcmlhdGUgZm9yIGl0LlxuICogSWYgd2UgcGFzcyBpbiBhIGRldmljZVNvY2tldCwgd2Ugb25seSBhdHRlbXB0IHRvIGZpbmQgd2Vidmlld3Mgd2hpY2ggbWF0Y2hcbiAqIHRoYXQgc29ja2V0IG5hbWUgKHRoaXMgaXMgZm9yIGFwcHMgd2hpY2ggZW1iZWQgQ2hyb21pdW0sIHdoaWNoIGlzbid0IHRoZVxuICogc2FtZSBhcyBjaHJvbWUtYmFja2VkIHdlYnZpZXdzKS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gYWRiIC0gYW4gQURCIGluc3RhbmNlXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRldmljZVNvY2tldCAtIHRoZSBleHBsaWN0bHktbmFtZWQgZGV2aWNlIHNvY2tldCB0byB1c2VcbiAqXG4gKiBAcmV0dXJuIHtBcnJheS48V2Vidmlld1Byb2M+fVxuICovXG5hc3luYyBmdW5jdGlvbiB3ZWJ2aWV3c0Zyb21Qcm9jcyAoYWRiLCBkZXZpY2VTb2NrZXQgPSBudWxsKSB7XG4gIGNvbnN0IHNvY2tldE5hbWVzID0gYXdhaXQgZ2V0UG90ZW50aWFsV2Vidmlld1Byb2NzKGFkYik7XG4gIGNvbnN0IHdlYnZpZXdzID0gW107XG4gIGZvciAoY29uc3Qgc29ja2V0TmFtZSBvZiBzb2NrZXROYW1lcykge1xuICAgIGlmIChkZXZpY2VTb2NrZXQgPT09IENIUk9NSVVNX0RFVlRPT0xTX1NPQ0tFVCAmJiBzb2NrZXROYW1lID09PSBgQCR7ZGV2aWNlU29ja2V0fWApIHtcbiAgICAgIHdlYnZpZXdzLnB1c2goe1xuICAgICAgICBwcm9jOiBzb2NrZXROYW1lLFxuICAgICAgICB3ZWJ2aWV3OiBDSFJPTUlVTV9XSU4sXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHNvY2tldE5hbWVNYXRjaCA9IERFVlRPT0xTX1NPQ0tFVF9QQVRURVJOLmV4ZWMoc29ja2V0TmFtZSk7XG4gICAgaWYgKCFzb2NrZXROYW1lTWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBjcm9zc3dhbGtNYXRjaCA9IENST1NTV0FMS19TT0NLRVRfUEFUVEVSTi5leGVjKHNvY2tldE5hbWUpO1xuICAgIGlmICghc29ja2V0TmFtZU1hdGNoWzFdICYmICFjcm9zc3dhbGtNYXRjaCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGRldmljZVNvY2tldCAmJiBzb2NrZXROYW1lID09PSBgQCR7ZGV2aWNlU29ja2V0fWAgfHwgIWRldmljZVNvY2tldCkge1xuICAgICAgd2Vidmlld3MucHVzaCh7XG4gICAgICAgIHByb2M6IHNvY2tldE5hbWUsXG4gICAgICAgIHdlYnZpZXc6IHNvY2tldE5hbWVNYXRjaFsxXVxuICAgICAgICAgID8gYCR7V0VCVklFV19CQVNFfSR7c29ja2V0TmFtZU1hdGNoWzFdfWBcbiAgICAgICAgICA6IGAke1dFQlZJRVdfQkFTRX0ke2Nyb3Nzd2Fsa01hdGNoWzFdfWAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdlYnZpZXdzO1xufVxuXG4vKipcbiAqIEFsbG9jYXRlcyBhIGxvY2FsIHBvcnQgZm9yIGRldnRvb2xzIGNvbW11bmljYXRpb25cbiAqXG4gKiBAcGFyYW0ge0FEQn0gYWRiIEFEQiBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHNvY2tldE5hbWUgVGhlIHJlbW90ZSBVbml4IHNvY2tldCBuYW1lXG4gKiBAcGFyYW0gez9udW1iZXJ9IHdlYnZpZXdEZXZ0b29sc1BvcnQgVGhlIGxvY2FsIHBvcnQgbnVtYmVyIG9yIG51bGwgdG8gYXBwbHlcbiAqIGF1dG9kZXRlY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsb2NhbCBwb3J0IG51bWJlciBpZiB0aGUgcmVtb3RlIHNvY2tldCBoYXMgYmVlbiBmb3J3YXJkZWRcbiAqIHN1Y2Nlc3NmdWxseSBvciBgbnVsbGAgb3RoZXJ3aXNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGFsbG9jYXRpbmcgdGhlIGxvY2FsIHBvcnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYWxsb2NhdGVEZXZ0b29sc1BvcnQgKGFkYiwgc29ja2V0TmFtZSwgd2Vidmlld0RldnRvb2xzUG9ydCA9IG51bGwpIHtcbiAgLy8gc29ja2V0IG5hbWVzIGNvbWUgd2l0aCAnQCcsIGJ1dCB0aGlzIHNob3VsZCBub3QgYmUgYSBwYXJ0IG9mIHRoZSBhYnN0cmFjdFxuICAvLyByZW1vdGUgcG9ydCwgc28gcmVtb3ZlIGl0XG4gIGNvbnN0IHJlbW90ZVBvcnQgPSBzb2NrZXROYW1lLnJlcGxhY2UoL15ALywgJycpO1xuICBsZXQgW3N0YXJ0UG9ydCwgZW5kUG9ydF0gPSBERVZUT09MU19QT1JUU19SQU5HRTtcbiAgaWYgKHdlYnZpZXdEZXZ0b29sc1BvcnQpIHtcbiAgICBlbmRQb3J0ID0gd2Vidmlld0RldnRvb2xzUG9ydCArIChlbmRQb3J0IC0gc3RhcnRQb3J0KTtcbiAgICBzdGFydFBvcnQgPSB3ZWJ2aWV3RGV2dG9vbHNQb3J0O1xuICB9XG4gIGxvZ2dlci5kZWJ1ZyhgRm9yd2FyZGluZyByZW1vdGUgcG9ydCAke3JlbW90ZVBvcnR9IHRvIGEgbG9jYWwgYCArXG4gICAgYHBvcnQgaW4gcmFuZ2UgJHtzdGFydFBvcnR9Li4ke2VuZFBvcnR9YCk7XG4gIGlmICghd2Vidmlld0RldnRvb2xzUG9ydCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgWW91IGNvdWxkIHVzZSB0aGUgJ3dlYnZpZXdEZXZ0b29sc1BvcnQnIGNhcGFiaWxpdHkgdG8gY3VzdG9taXplIGAgK1xuICAgICAgYHRoZSBzdGFydGluZyBwb3J0IG51bWJlcmApO1xuICB9XG4gIHJldHVybiBhd2FpdCBERVZUT09MU19QT1JUX0FMTE9DQVRJT05fR1VBUkQoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBsb2NhbFBvcnQ7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsUG9ydCA9IGF3YWl0IGZpbmRBUG9ydE5vdEluVXNlKHN0YXJ0UG9ydCwgZW5kUG9ydCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBhbnkgZnJlZSBwb3J0IHRvIGZvcndhcmQgdGhlIERldnRvb2xzIHNvY2tldCBgICtcbiAgICAgICAgYGluIHJhbmdlICR7c3RhcnRQb3J0fS4uJHtlbmRQb3J0fS4gWW91IGNvdWxkIHNldCB0aGUgc3RhcnRpbmcgcG9ydCBudW1iZXIgYCArXG4gICAgICAgIGBtYW51YWxseSBieSBwcm92aWRpbmcgdGhlICd3ZWJ2aWV3RGV2dG9vbHNQb3J0JyBjYXBhYmlsaXR5YCk7XG4gICAgfVxuICAgIGF3YWl0IGFkYi5hZGJFeGVjKFsnZm9yd2FyZCcsIGB0Y3A6JHtsb2NhbFBvcnR9YCwgYGxvY2FsYWJzdHJhY3Q6JHtyZW1vdGVQb3J0fWBdKTtcbiAgICByZXR1cm4gbG9jYWxQb3J0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJ2aWV3UHJvcHNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcm9jIFRoZSBuYW1lIG9mIHRoZSBEZXZ0b29scyBVbml4IHNvY2tldFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHdlYnZpZXcgVGhlIHdlYiB2aWV3IGFsaWFzLiBMb29rcyBsaWtlIGBXRUJWSUVXX2BcbiAqIHByZWZpeCBwbHVzIFBJRCBvciBwYWNrYWdlIG5hbWVcbiAqIEBwcm9wZXJ0eSB7P09iamVjdH0gaW5mbyBXZWJ2aWV3IGluZm9ybWF0aW9uIGFzIGl0IGlzIHJldHJpZXZlZCBieVxuICogL2pzb24vdmVyc2lvbiBDRFAgZW5kcG9pbnRcbiAqIEBwcm9wZXJ0eSB7P0FycmF5PE9iamVjdD59IHBhZ2VzIFdlYnZpZXcgcGFnZXMgbGlzdCBhcyBpdCBpcyByZXRyaWV2ZWQgYnlcbiAqIC9qc29uL2xpc3QgQ0RQIGVuZHBvaW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEZXRhaWxDb2xsZWN0aW9uT3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfG51bWJlcn0gd2Vidmlld0RldnRvb2xzUG9ydCBUaGUgc3RhcnRpbmcgcG9ydCB0byB1c2UgZm9yIHdlYnZpZXcgcGFnZVxuICogcHJlc2VuY2UgY2hlY2sgKGlmIG5vdCB0aGUgZGVmYXVsdCBvZiA5MjIyKS5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzIFdoZXRoZXIgdG8gY2hlY2sgZm9yIHdlYnZpZXdcbiAqIHBhZ2VzIHByZXNlbmNlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbiBXaGV0aGVyIHRvIGNvbGxlY3RcbiAqIHdlYiB2aWV3IGRldGFpbHMgYW5kIHNlbmQgdGhlbSB0byBDaHJvbWVkcml2ZXIgY29uc3RydWN0b3IsIHNvIGl0IGNvdWxkXG4gKiBzZWxlY3QgYSBiaW5hcnkgbW9yZSBwcmVjaXNlbHkgYmFzZWQgb24gdGhpcyBpbmZvLlxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIHdyYXBwZXIgZm9yIENocm9tZSBEZWJ1Z2dlciBQcm90b2NvbCBkYXRhIGNvbGxlY3Rpb24uXG4gKiBObyBlcnJvciBpcyB0aHJvd24gaWYgQ0RQIHJlcXVlc3QgZmFpbHMgLSBpbiBzdWNoIGNhc2Ugbm8gZGF0YSB3aWxsIGJlXG4gKiByZWNvcmRlZCBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGB3ZWJ2aWV3c01hcHBpbmdgIGl0ZW0uXG4gKlxuICogQHBhcmFtIHtBREJ9IGFkYiBUaGUgQURCIGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PFdlYnZpZXdQcm9wcz59IHdlYnZpZXdzTWFwcGluZyBUaGUgY3VycmVudCB3ZWJ2aWV3cyBtYXBwaW5nXG4gKiAhISEgRWFjaCBpdGVtIG9mIHRoaXMgYXJyYXkgZ2V0cyBtdXRhdGVkIChgaW5mb2AvYHBhZ2VzYCBwcm9wZXJ0aWVzIGdldCBhZGRlZFxuICogYmFzZWQgb24gdGhlIHByb3ZpZGVkIGBvcHRzYCkgaWYgdGhlIHJlcXVlc3RlZCBkZXRhaWxzIGhhdmUgYmVlblxuICogc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBmb3IgaXQgISEhXG4gKiBAcGFyYW0ge0RldGFpbENvbGxlY3Rpb25PcHRpb25zfSBvcHRzIElmIGJvdGggYGVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzYCBhbmRcbiAqIGBlbmFibGVXZWJ2aWV3RGV0YWlsc0NvbGxlY3Rpb25gIHByb3BlcnRpZXMgYXJlIGZhbHN5IHRoZW4gbm8gZGV0YWlscyBjb2xsZWN0aW9uXG4gKiBpcyBwZXJmb3JtZWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29sbGVjdFdlYnZpZXdzRGV0YWlscyAoYWRiLCB3ZWJ2aWV3c01hcHBpbmcsIG9wdHMgPSB7fSkge1xuICBpZiAoXy5pc0VtcHR5KHdlYnZpZXdzTWFwcGluZykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgd2Vidmlld0RldnRvb2xzUG9ydCA9IG51bGwsXG4gICAgZW5zdXJlV2Vidmlld3NIYXZlUGFnZXMgPSBudWxsLFxuICAgIGVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbiA9IG51bGwsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghZW5zdXJlV2Vidmlld3NIYXZlUGFnZXMpIHtcbiAgICBsb2dnZXIuaW5mbyhgTm90IGNoZWNraW5nIHdoZXRoZXIgd2Vidmlld3MgaGF2ZSBhY3RpdmUgcGFnZXM7IHVzZSB0aGUgYCArXG4gICAgICBgJ2Vuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzJyBjYXAgdG8gdHVybiB0aGlzIGNoZWNrIG9uYCk7XG4gIH1cblxuICBpZiAoIWVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbikge1xuICAgIGxvZ2dlci5pbmZvKGBOb3QgY29sbGVjdGluZyB3ZWIgdmlldyBkZXRhaWxzLiBEZXRhaWxzIGNvbGxlY3Rpb24gbWlnaHQgaGVscCBgICtcbiAgICAgIGB0byBtYWtlIENocm9tZWRyaXZlciBpbml0aWFsaXphdGlvbiBtb3JlIHByZWNpc2UuIFVzZSB0aGUgJ2VuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbicgYCArXG4gICAgICBgY2FwIHRvIHR1cm4gaXQgb25gKTtcbiAgfVxuXG4gIGlmICghZW5zdXJlV2Vidmlld3NIYXZlUGFnZXMgJiYgIWVuYWJsZVdlYnZpZXdEZXRhaWxzQ29sbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENvbm5lY3QgdG8gZWFjaCBkZXZ0b29scyBzb2NrZXQgYW5kIHJldHJpZXZlIHdlYiB2aWV3IGRldGFpbHNcbiAgbG9nZ2VyLmRlYnVnKGBDb2xsZWN0aW5nIENEUCBkYXRhIG9mICR7dXRpbC5wbHVyYWxpemUoJ3dlYnZpZXcnLCB3ZWJ2aWV3c01hcHBpbmcubGVuZ3RoLCB0cnVlKX1gKTtcbiAgY29uc3QgZGV0YWlsQ29sbGVjdG9ycyA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygd2Vidmlld3NNYXBwaW5nKSB7XG4gICAgZGV0YWlsQ29sbGVjdG9ycy5wdXNoKChhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgbG9jYWxQb3J0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbG9jYWxQb3J0ID0gYXdhaXQgYWxsb2NhdGVEZXZ0b29sc1BvcnQoYWRiLCBpdGVtLnByb2MsIHdlYnZpZXdEZXZ0b29sc1BvcnQpO1xuICAgICAgICBpZiAoZW5hYmxlV2Vidmlld0RldGFpbHNDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgaXRlbS5pbmZvID0gYXdhaXQgY2RwSW5mbyhsb2NhbFBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnN1cmVXZWJ2aWV3c0hhdmVQYWdlcykge1xuICAgICAgICAgIGl0ZW0ucGFnZXMgPSBhd2FpdCBjZHBMaXN0KGxvY2FsUG9ydCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGxvY2FsUG9ydCkge1xuICAgICAgICAgIGF3YWl0IGFkYi5yZW1vdmVQb3J0Rm9yd2FyZChsb2NhbFBvcnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkoKSk7XG4gIH1cbiAgYXdhaXQgQi5hbGwoZGV0YWlsQ29sbGVjdG9ycyk7XG4gIGxvZ2dlci5kZWJ1ZyhgQ0RQIGRhdGEgY29sbGVjdGlvbiBjb21wbGV0ZWRgKTtcbn1cblxuLy8gaHR0cHM6Ly9jaHJvbWVkZXZ0b29scy5naXRodWIuaW8vZGV2dG9vbHMtcHJvdG9jb2wvXG5hc3luYyBmdW5jdGlvbiBjZHBMaXN0IChsb2NhbFBvcnQpIHtcbiAgcmV0dXJuIChhd2FpdCBheGlvcyh7XG4gICAgdXJsOiBgaHR0cDovLzEyNy4wLjAuMToke2xvY2FsUG9ydH0vanNvbi9saXN0YCxcbiAgICB0aW1lb3V0OiBDRFBfUkVRX1RJTUVPVVQsXG4gIH0pKS5kYXRhO1xufVxuXG4vLyBodHRwczovL2Nocm9tZWRldnRvb2xzLmdpdGh1Yi5pby9kZXZ0b29scy1wcm90b2NvbC9cbmFzeW5jIGZ1bmN0aW9uIGNkcEluZm8gKGxvY2FsUG9ydCkge1xuICByZXR1cm4gKGF3YWl0IGF4aW9zKHtcbiAgICB1cmw6IGBodHRwOi8vMTI3LjAuMC4xOiR7bG9jYWxQb3J0fS9qc29uL3ZlcnNpb25gLFxuICAgIHRpbWVvdXQ6IENEUF9SRVFfVElNRU9VVCxcbiAgfSkpLmRhdGE7XG59XG5cbi8qKlxuICogVGFrZSBhIHdlYnZpZXcgbmFtZSBsaWtlIFdFQlZJRVdfNDI5NiBhbmQgdXNlICdhZGIgc2hlbGwgcHMnIHRvIGZpZ3VyZSBvdXRcbiAqIHdoaWNoIGFwcCBwYWNrYWdlIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHdlYnZpZXcuIE9uZSBvZiB0aGUgcmVhc29ucyB3ZVxuICogd2FudCB0byBkbyB0aGlzIGlzIHRvIG1ha2Ugc3VyZSB3ZSdyZSBsaXN0aW5nIHdlYnZpZXdzIGZvciB0aGUgYWN0dWFsIEFVVCxcbiAqIG5vdCBzb21lIG90aGVyIHJ1bm5pbmcgYXBwXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGFkYiAtIGFuIEFEQiBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHdlYnZpZXcgLSBhIHdlYnZpZXcgcHJvY2VzcyBuYW1lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gLSB0aGUgcGFja2FnZSBuYW1lIG9mIHRoZSBhcHAgcnVubmluZyB0aGUgd2Vidmlld1xuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIHdhcyBhIGZhaWx1cmUgd2hpbGUgcmV0cmlldmluZyB0aGUgcHJvY2VzcyBuYW1lXG4gKi9cbmhlbHBlcnMucHJvY0Zyb21XZWJ2aWV3ID0gYXN5bmMgZnVuY3Rpb24gcHJvY0Zyb21XZWJ2aWV3IChhZGIsIHdlYnZpZXcpIHtcbiAgY29uc3QgcGlkTWF0Y2ggPSBXRUJWSUVXX1BJRF9QQVRURVJOLmV4ZWMod2Vidmlldyk7XG4gIGlmICghcGlkTWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIFBJRCBmb3Igd2VidmlldyAnJHt3ZWJ2aWV3fSdgKTtcbiAgfVxuXG4gIGNvbnN0IHBpZCA9IHBpZE1hdGNoWzFdO1xuICBsb2dnZXIuZGVidWcoYCR7d2Vidmlld30gbWFwcGVkIHRvIHBpZCAke3BpZH1gKTtcbiAgbG9nZ2VyLmRlYnVnKGBHZXR0aW5nIHByb2Nlc3MgbmFtZSBmb3Igd2VidmlldyAnJHt3ZWJ2aWV3fSdgKTtcbiAgY29uc3QgcGtnID0gYXdhaXQgYWRiLmdldE5hbWVCeVBpZChwaWQpO1xuICBsb2dnZXIuZGVidWcoYEdvdCBwcm9jZXNzIG5hbWU6ICcke3BrZ30nYCk7XG4gIHJldHVybiBwa2c7XG59O1xuXG4vKipcbiAqIFBhcnNlIHdlYnZpZXcgbmFtZXMgZm9yIGdldENvbnRleHRzXG4gKlxuICogQHBhcmFtIHtBcnJheTxXZWJ2aWV3c01hcHBpbmc+fSB3ZWJ2aWV3c01hcHBpbmcgU2VlIG5vdGUgb24gZ2V0V2ViVmlld3NNYXBwaW5nXG4gKiBAcGFyYW0ge0dldFdlYnZpZXdzT3B0c30gb3B0cyBTZWUgbm90ZSBvbiBnZXRXZWJWaWV3c01hcHBpbmdcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSAtIGEgbGlzdCBvZiB3ZWJ2aWV3IG5hbWVzXG4gKi9cbmhlbHBlcnMucGFyc2VXZWJ2aWV3TmFtZXMgPSBmdW5jdGlvbiBwYXJzZVdlYnZpZXdOYW1lcyAod2Vidmlld3NNYXBwaW5nLCB7XG4gIGVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzID0gdHJ1ZSxcbiAgaXNDaHJvbWVTZXNzaW9uID0gZmFsc2Vcbn0gPSB7fSkge1xuICBpZiAoaXNDaHJvbWVTZXNzaW9uKSB7XG4gICAgcmV0dXJuIFtDSFJPTUlVTV9XSU5dO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3Qge3dlYnZpZXcsIHBhZ2VzLCBwcm9jLCB3ZWJ2aWV3TmFtZX0gb2Ygd2Vidmlld3NNYXBwaW5nKSB7XG4gICAgaWYgKGVuc3VyZVdlYnZpZXdzSGF2ZVBhZ2VzICYmIHBhZ2VzPy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxvZ2dlci5pbmZvKGBTa2lwcGluZyB0aGUgd2VidmlldyAnJHt3ZWJ2aWV3fScgYXQgJyR7cHJvY30nIGAgK1xuICAgICAgICBgc2luY2UgaXQgaGFzIHJlcG9ydGVkIGhhdmluZyB6ZXJvIHBhZ2VzYCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHdlYnZpZXdOYW1lKSB7XG4gICAgICByZXN1bHQucHVzaCh3ZWJ2aWV3TmFtZSk7XG4gICAgfVxuICB9XG4gIGxvZ2dlci5kZWJ1ZyhgRm91bmQgJHt1dGlsLnBsdXJhbGl6ZSgnd2VidmlldycsIHJlc3VsdC5sZW5ndGgsIHRydWUpfTogJHtKU09OLnN0cmluZ2lmeShyZXN1bHQpfWApO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBHZXRXZWJ2aWV3c09wdHNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbmRyb2lkRGV2aWNlU29ja2V0IFtudWxsXSAtIGRldmljZSBzb2NrZXQgbmFtZVxuICogQHByb3BlcnR5IHtib29sZWFufSBlbnN1cmVXZWJ2aWV3c0hhdmVQYWdlcyBbdHJ1ZV0gLSB3aGV0aGVyIHRvIGNoZWNrIGZvciB3ZWJ2aWV3XG4gKiBwYWdlIHByZXNlbmNlXG4gKiBAcHJvcGVydHkge251bWJlcn0gd2Vidmlld0RldnRvb2xzUG9ydCBbOTIyMl0gLSBwb3J0IHRvIHVzZSBmb3Igd2VidmlldyBwYWdlXG4gKiBwcmVzZW5jZSBjaGVjay5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5hYmxlV2Vidmlld0RldGFpbHNDb2xsZWN0aW9uIFt0cnVlXSAtIHdoZXRoZXIgdG8gY29sbGVjdFxuICogd2ViIHZpZXcgZGV0YWlscyBhbmQgc2VuZCB0aGVtIHRvIENocm9tZWRyaXZlciBjb25zdHJ1Y3Rvciwgc28gaXQgY291bGRcbiAqIHNlbGVjdCBhIGJpbmFyeSBtb3JlIHByZWNpc2VseSBiYXNlZCBvbiB0aGlzIGluZm8uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzQ2hyb21lU2Vzc2lvbiBbZmFsc2VdIC0gdHJ1ZSBpZiBDaHJvbWVTZXNzaW9uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJ2aWV3c01hcHBpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcm9jIFNlZSBub3RlIG9uIFdlYnZpZXdQcm9wc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHdlYnZpZXcgU2VlIG5vdGUgb24gV2Vidmlld1Byb3BzXG4gKiBAcHJvcGVydHkgez9PYmplY3R9IGluZm8gU2VlIG5vdGUgb24gV2Vidmlld1Byb3BzXG4gKiBAcHJvcGVydHkgez9BcnJheTxPYmplY3Q+fSBwYWdlcyBTZWUgbm90ZSBvbiBXZWJ2aWV3UHJvcHNcbiAqIEBwcm9wZXJ5IHs/c3RyaW5nfSB3ZWJ2aWV3TmFtZSBBbiBhY3R1YWwgd2VidmlldyBuYW1lIGZvciBzd2l0Y2hpbmcgY29udGV4dFxuICovXG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBhdmFpbGFibGUgd2Vidmlld3MgbWFwcGluZyBieSBpbnRyb3NwZWN0aW5nIHByb2Nlc3NlcyB3aXRoIGFkYixcbiAqIHdoZXJlIHdlYnZpZXdzIGFyZSBsaXN0ZWQuIEl0J3MgcG9zc2libGUgdG8gcGFzcyBpbiBhICdkZXZpY2VTb2NrZXQnIGFyZywgd2hpY2hcbiAqIGxpbWl0cyB0aGUgd2VidmlldyBwb3NzaWJpbGl0aWVzIHRvIHRoZSBvbmUgcnVubmluZyBvbiB0aGUgQ2hyb21pdW0gZGV2dG9vbHNcbiAqIHNvY2tldCB3ZSdyZSBpbnRlcmVzdGVkIGluIChzZWUgbm90ZSBvbiB3ZWJ2aWV3c0Zyb21Qcm9jcykuIFdlIGNhbiBhbHNvXG4gKiBkaXJlY3QgdGhpcyBtZXRob2QgdG8gdmVyaWZ5IHdoZXRoZXIgYSBwYXJ0aWN1bGFyIHdlYnZpZXcgcHJvY2VzcyBhY3R1YWxseVxuICogaGFzIGFueSBwYWdlcyAoaWYgYSBwcm9jZXNzIGV4aXN0cyBidXQgbm8gcGFnZXMgYXJlIGZvdW5kLCBDaHJvbWVkcml2ZXIgd2lsbFxuICogbm90IGFjdHVhbGx5IGJlIGFibGUgdG8gY29ubmVjdCB0byBpdCwgc28gdGhpcyBzZXJ2ZXMgYXMgYSBndWFyZCBmb3IgdGhhdFxuICogc3RyYW5nZSBmYWlsdXJlIG1vZGUpLiBUaGUgc3RyYXRlZ3kgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW55IHBhZ2VzIGFyZVxuICogYWN0aXZlIGludm9sdmVzIHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSByZW1vdGUgZGVidWcgc2VydmVyIG9uIHRoZSBkZXZpY2UsXG4gKiBoZW5jZSBpdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNwZWNpZnkgdGhlIHBvcnQgb24gdGhlIGhvc3QgbWFjaGluZSB3aGljaFxuICogc2hvdWxkIGJlIHVzZWQgZm9yIHRoaXMgY29tbXVuaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gYWRiIC0gYW4gQURCIGluc3RhbmNlXG4gKiBAcGFyYW0ge0dldFdlYnZpZXdzT3B0c30gb3B0c1xuICpcbiAqIEByZXR1cm4ge0FycmF5PFdlYnZpZXdzTWFwcGluZz59IHdlYnZpZXdzTWFwcGluZ1xuICovXG5oZWxwZXJzLmdldFdlYlZpZXdzTWFwcGluZyA9IGFzeW5jIGZ1bmN0aW9uIGdldFdlYlZpZXdzTWFwcGluZyAoYWRiLCB7XG4gIGFuZHJvaWREZXZpY2VTb2NrZXQgPSBudWxsLFxuICBlbnN1cmVXZWJ2aWV3c0hhdmVQYWdlcyA9IHRydWUsXG4gIHdlYnZpZXdEZXZ0b29sc1BvcnQgPSBudWxsLFxuICBlbmFibGVXZWJ2aWV3RGV0YWlsc0NvbGxlY3Rpb24gPSB0cnVlLFxuICBpc0Nocm9tZVNlc3Npb24gPSBmYWxzZVxufSA9IHt9KSB7XG4gIGlmIChpc0Nocm9tZVNlc3Npb24pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBsb2dnZXIuZGVidWcoJ0dldHRpbmcgYSBsaXN0IG9mIGF2YWlsYWJsZSB3ZWJ2aWV3cycpO1xuICBjb25zdCB3ZWJ2aWV3c01hcHBpbmcgPSBhd2FpdCB3ZWJ2aWV3c0Zyb21Qcm9jcyhhZGIsIGFuZHJvaWREZXZpY2VTb2NrZXQpO1xuXG4gIGF3YWl0IGNvbGxlY3RXZWJ2aWV3c0RldGFpbHMoYWRiLCB3ZWJ2aWV3c01hcHBpbmcsIHtcbiAgICBlbnN1cmVXZWJ2aWV3c0hhdmVQYWdlcyxcbiAgICBlbmFibGVXZWJ2aWV3RGV0YWlsc0NvbGxlY3Rpb24sXG4gICAgd2Vidmlld0RldnRvb2xzUG9ydCxcbiAgfSk7XG5cbiAgZm9yIChjb25zdCB3ZWJ2aWV3TWFwcGluZyBvZiB3ZWJ2aWV3c01hcHBpbmcpIHtcbiAgICBjb25zdCB7d2VidmlldywgaW5mb30gPSB3ZWJ2aWV3TWFwcGluZztcbiAgICB3ZWJ2aWV3TWFwcGluZy53ZWJ2aWV3TmFtZSA9IG51bGw7XG5cbiAgICBsZXQgd3ZOYW1lID0gd2VidmlldztcbiAgICBsZXQgcHJvY2VzcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIWFuZHJvaWREZXZpY2VTb2NrZXQpIHtcbiAgICAgIGNvbnN0IHBrZ01hdGNoID0gV0VCVklFV19QS0dfUEFUVEVSTi5leGVjKHdlYnZpZXcpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gd2ViIHZpZXcgbmFtZSBjb3VsZCBlaXRoZXIgYmUgc3VmZml4ZWQgd2l0aCBQSUQgb3IgdGhlIHBhY2thZ2UgbmFtZVxuICAgICAgICAvLyBwYWNrYWdlIG5hbWVzIGNvdWxkIG5vdCBzdGFydCB3aXRoIGEgZGlnaXRcbiAgICAgICAgY29uc3QgcGtnID0gcGtnTWF0Y2ggPyBwa2dNYXRjaFsxXSA6IGF3YWl0IGhlbHBlcnMucHJvY0Zyb21XZWJ2aWV3KGFkYiwgd2Vidmlldyk7XG4gICAgICAgIHd2TmFtZSA9IGAke1dFQlZJRVdfQkFTRX0ke3BrZ31gO1xuICAgICAgICBjb25zdCBwaWRNYXRjaCA9IFdFQlZJRVdfUElEX1BBVFRFUk4uZXhlYyh3ZWJ2aWV3KTtcbiAgICAgICAgcHJvY2VzcyA9IHtcbiAgICAgICAgICBuYW1lOiBwa2csXG4gICAgICAgICAgaWQ6IHBpZE1hdGNoID8gcGlkTWF0Y2hbMV0gOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3ZWJ2aWV3TWFwcGluZy53ZWJ2aWV3TmFtZSA9IHd2TmFtZTtcbiAgICBjb25zdCBrZXkgPSB0b0RldGFpbHNDYWNoZUtleShhZGIsIHd2TmFtZSk7XG4gICAgaWYgKGluZm8gfHwgcHJvY2Vzcykge1xuICAgICAgV0VCVklFV1NfREVUQUlMU19DQUNIRS5zZXQoa2V5LCB7IGluZm8sIHByb2Nlc3MgfSk7XG4gICAgfSBlbHNlIGlmIChXRUJWSUVXU19ERVRBSUxTX0NBQ0hFLmhhcyhrZXkpKSB7XG4gICAgICBXRUJWSUVXU19ERVRBSUxTX0NBQ0hFLmRlbChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gd2Vidmlld3NNYXBwaW5nO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9jZXNzSW5mb1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgVGhlIHByb2Nlc3MgbmFtZVxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBpZCBUaGUgcHJvY2VzcyBpZCAoaWYgY291bGQgYmUgcmV0cmlldmVkKVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gV2ViVmlld0RldGFpbHNcbiAqIEBwcm9wZXJ0eSB7P1Byb2Nlc3NJbmZvfSBwcm9jZXNzIC0gV2ViIHZpZXcgcHJvY2VzcyBkZXRhaWxzXG4gKiBAcHJvcGVydHkge09iamVjdH0gaW5mbyAtIFdlYiB2aWV3IGRldGFpbHMgYXMgcmV0dXJuZWQgYnkgL2pzb24vdmVyc2lvbiBDRFAgZW5kcG9pbnQsIGZvciBleGFtcGxlOlxuICoge1xuICogIFwiQnJvd3NlclwiOiBcIkNocm9tZS83Mi4wLjM2MDEuMFwiLFxuICogIFwiUHJvdG9jb2wtVmVyc2lvblwiOiBcIjEuM1wiLFxuICogIFwiVXNlci1BZ2VudFwiOiBcIk1vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzEzXzYpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Mi4wLjM2MDEuMCBTYWZhcmkvNTM3LjM2XCIsXG4gKiAgXCJWOC1WZXJzaW9uXCI6IFwiNy4yLjIzM1wiLFxuICogIFwiV2ViS2l0LVZlcnNpb25cIjogXCI1MzcuMzYgKEBjZmVkZTlkYjFkMTU0ZGUwNDY4Y2IwNTM4NDc5ZjM0YzA3NTVhMGY0KVwiLFxuICogIFwid2ViU29ja2V0RGVidWdnZXJVcmxcIjogXCJ3czovL2xvY2FsaG9zdDo5MjIyL2RldnRvb2xzL2Jyb3dzZXIvYjBiOGE0ZmItYmIxNy00MzU5LTk1MzMtYThkOWYzOTA4YmQ4XCJcbiAqIH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZXZlcyB3ZWIgdmlldyBkZXRhaWxzIHByZXZpb3VzbHkgY2FjaGVkIGJ5IGBnZXRXZWJ2aWV3c2AgY2FsbFxuICpcbiAqIEBwYXJhbSB7QURCfSBhZGIgQURCIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gd2VidmlldyBUaGUgbmFtZSBvZiB0aGUgd2ViIHZpZXdcbiAqIEByZXR1cm5zIHs/V2ViVmlld0RldGFpbHN9IEVpdGhlciBgdW5kZWZpbmVkYCBvciB0aGUgcmVjZW50IHdlYiB2aWV3IGRldGFpbHNcbiAqL1xuaGVscGVycy5nZXRXZWJ2aWV3RGV0YWlscyA9IGZ1bmN0aW9uIGdldFdlYnZpZXdEZXRhaWxzIChhZGIsIHdlYnZpZXcpIHtcbiAgY29uc3Qga2V5ID0gdG9EZXRhaWxzQ2FjaGVLZXkoYWRiLCB3ZWJ2aWV3KTtcbiAgcmV0dXJuIFdFQlZJRVdTX0RFVEFJTFNfQ0FDSEUuZ2V0KGtleSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBDaHJvbWUgZHJpdmVyIGNhcGFiaWxpdGllcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWRcbiAqIEFwcGl1bSBjYXBhYmlsaXRpZXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBVc2VyLXByb3ZpZGVkIGNhcGFiaWxpdGllcyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgQW5kcm9pZCBkZXZpY2UgdW5kZXIgdGVzdFxuICogQHBhcmFtIHs/V2ViVmlld0RldGFpbHN9IHdlYlZpZXdEZXRhaWxzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY2FwYWJpbGl0aWVzIG9iamVjdC5cbiAqIFNlZSBodHRwczovL2Nocm9tZWRyaXZlci5jaHJvbWl1bS5vcmcvY2FwYWJpbGl0aWVzIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmhlbHBlcnMuY3JlYXRlQ2hyb21lZHJpdmVyQ2FwcyA9IGZ1bmN0aW9uIGNyZWF0ZUNocm9tZWRyaXZlckNhcHMgKG9wdHMsIGRldmljZUlkLCB3ZWJWaWV3RGV0YWlscykge1xuICBjb25zdCBjYXBzID0geyBjaHJvbWVPcHRpb25zOiB7fSB9O1xuXG4gIGNvbnN0IGFuZHJvaWRQYWNrYWdlID0gb3B0cy5jaHJvbWVPcHRpb25zPy5hbmRyb2lkUGFja2FnZVxuICAgIHx8IG9wdHMuYXBwUGFja2FnZVxuICAgIHx8IHdlYlZpZXdEZXRhaWxzPy5pbmZvPy5bJ0FuZHJvaWQtUGFja2FnZSddO1xuICBpZiAoYW5kcm9pZFBhY2thZ2UpIHtcbiAgICAvLyBjaHJvbWVkcml2ZXIgcmFpc2VzIGFuIGludmFsaWQgYXJndW1lbnQgZXJyb3Igd2hlbiBhbmRyb2lkUGFja2FnZSBpcyAnbnVsbCdcbiAgICBjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZFBhY2thZ2UgPSBhbmRyb2lkUGFja2FnZTtcbiAgfVxuICBpZiAoXy5pc0Jvb2xlYW4ob3B0cy5jaHJvbWVVc2VSdW5uaW5nQXBwKSkge1xuICAgIGNhcHMuY2hyb21lT3B0aW9ucy5hbmRyb2lkVXNlUnVubmluZ0FwcCA9IG9wdHMuY2hyb21lVXNlUnVubmluZ0FwcDtcbiAgfVxuICBpZiAob3B0cy5jaHJvbWVBbmRyb2lkUGFja2FnZSkge1xuICAgIGNhcHMuY2hyb21lT3B0aW9ucy5hbmRyb2lkUGFja2FnZSA9IG9wdHMuY2hyb21lQW5kcm9pZFBhY2thZ2U7XG4gIH1cbiAgaWYgKG9wdHMuY2hyb21lQW5kcm9pZEFjdGl2aXR5KSB7XG4gICAgY2Fwcy5jaHJvbWVPcHRpb25zLmFuZHJvaWRBY3Rpdml0eSA9IG9wdHMuY2hyb21lQW5kcm9pZEFjdGl2aXR5O1xuICB9XG4gIGlmIChvcHRzLmNocm9tZUFuZHJvaWRQcm9jZXNzKSB7XG4gICAgY2Fwcy5jaHJvbWVPcHRpb25zLmFuZHJvaWRQcm9jZXNzID0gb3B0cy5jaHJvbWVBbmRyb2lkUHJvY2VzcztcbiAgfSBlbHNlIGlmICh3ZWJWaWV3RGV0YWlscz8ucHJvY2Vzcz8ubmFtZSAmJiB3ZWJWaWV3RGV0YWlscz8ucHJvY2Vzcz8uaWQpIHtcbiAgICBjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZFByb2Nlc3MgPSB3ZWJWaWV3RGV0YWlscy5wcm9jZXNzLm5hbWU7XG4gIH1cbiAgaWYgKF8udG9Mb3dlcihvcHRzLmJyb3dzZXJOYW1lKSA9PT0gJ2Nocm9taXVtLXdlYnZpZXcnKSB7XG4gICAgY2Fwcy5jaHJvbWVPcHRpb25zLmFuZHJvaWRBY3Rpdml0eSA9IG9wdHMuYXBwQWN0aXZpdHk7XG4gIH1cbiAgaWYgKG9wdHMucGFnZUxvYWRTdHJhdGVneSkge1xuICAgIGNhcHMucGFnZUxvYWRTdHJhdGVneSA9IG9wdHMucGFnZUxvYWRTdHJhdGVneTtcbiAgfVxuICBjb25zdCBpc0Nocm9tZSA9IF8udG9Mb3dlcihjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZFBhY2thZ2UpID09PSAnY2hyb21lJztcbiAgaWYgKF8uaW5jbHVkZXMoS05PV05fQ0hST01FX1BBQ0tBR0VfTkFNRVMsIGNhcHMuY2hyb21lT3B0aW9ucy5hbmRyb2lkUGFja2FnZSkgfHwgaXNDaHJvbWUpIHtcbiAgICAvLyBpZiB3ZSBoYXZlIGV4dHJhY3RlZCBwYWNrYWdlIGZyb20gY29udGV4dCBuYW1lLCBpdCBjb3VsZCBjb21lIGluIGFzIGJhcmVcbiAgICAvLyBcImNocm9tZVwiLCBhbmQgc28gd2Ugc2hvdWxkIG1ha2Ugc3VyZSB0aGUgZGV0YWlscyBhcmUgY29ycmVjdCwgaW5jbHVkaW5nXG4gICAgLy8gbm90IHVzaW5nIGFuIGFjdGl2aXR5IG9yIHByb2Nlc3MgaWRcbiAgICBpZiAoaXNDaHJvbWUpIHtcbiAgICAgIGNhcHMuY2hyb21lT3B0aW9ucy5hbmRyb2lkUGFja2FnZSA9IENIUk9NRV9QQUNLQUdFX05BTUU7XG4gICAgfVxuICAgIGRlbGV0ZSBjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZEFjdGl2aXR5O1xuICAgIGRlbGV0ZSBjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZFByb2Nlc3M7XG4gIH1cbiAgLy8gYWRkIGRldmljZSBpZCBmcm9tIGFkYlxuICBjYXBzLmNocm9tZU9wdGlvbnMuYW5kcm9pZERldmljZVNlcmlhbCA9IGRldmljZUlkO1xuXG4gIGlmIChfLmlzUGxhaW5PYmplY3Qob3B0cy5sb2dnaW5nUHJlZnMpIHx8IF8uaXNQbGFpbk9iamVjdChvcHRzLmNocm9tZUxvZ2dpbmdQcmVmcykpIHtcbiAgICBpZiAob3B0cy5sb2dnaW5nUHJlZnMpIHtcbiAgICAgIGxvZ2dlci53YXJuKGBUaGUgJ2xvZ2dpbmdQcmVmcycgY2FwIGlzIGRlcHJlY2F0ZWQ7IHVzZSB0aGUgJ2Nocm9tZUxvZ2dpbmdQcmVmcycgY2FwIGluc3RlYWRgKTtcbiAgICB9XG4gICAgY2Fwcy5sb2dnaW5nUHJlZnMgPSBvcHRzLmNocm9tZUxvZ2dpbmdQcmVmcyB8fCBvcHRzLmxvZ2dpbmdQcmVmcztcbiAgfVxuICBpZiAob3B0cy5lbmFibGVQZXJmb3JtYW5jZUxvZ2dpbmcpIHtcbiAgICBsb2dnZXIud2FybihgVGhlICdlbmFibGVQZXJmb3JtYW5jZUxvZ2dpbmcnIGNhcCBpcyBkZXByZWNhdGVkOyBzaW1wbHkgdXNlIGAgK1xuICAgICAgYHRoZSAnY2hyb21lTG9nZ2luZ1ByZWZzJyBjYXAgaW5zdGVhZCwgd2l0aCBhICdwZXJmb3JtYW5jZScga2V5IHNldCB0byAnQUxMJ2ApO1xuICAgIGNvbnN0IG5ld1ByZWYgPSB7cGVyZm9ybWFuY2U6ICdBTEwnfTtcbiAgICAvLyBkb24ndCBvdmVyd3JpdGUgb3RoZXIgbG9nZ2luZyBwcmVmcyB0aGF0IGhhdmUgYmVlbiBzZW50IGluIGlmIHRoZXkgZXhpc3RcbiAgICBjYXBzLmxvZ2dpbmdQcmVmcyA9IGNhcHMubG9nZ2luZ1ByZWZzXG4gICAgICA/IE9iamVjdC5hc3NpZ24oe30sIGNhcHMubG9nZ2luZ1ByZWZzLCBuZXdQcmVmKVxuICAgICAgOiBuZXdQcmVmO1xuICB9XG5cbiAgaWYgKG9wdHMuY2hyb21lT3B0aW9ucz8uQXJndW1lbnRzKSB7XG4gICAgLy8gbWVyZ2UgYEFyZ3VtZW50c2AgYW5kIGBhcmdzYFxuICAgIG9wdHMuY2hyb21lT3B0aW9ucy5hcmdzID0gWy4uLihvcHRzLmNocm9tZU9wdGlvbnMuYXJncyB8fCBbXSksIC4uLm9wdHMuY2hyb21lT3B0aW9ucy5Bcmd1bWVudHNdO1xuICAgIGRlbGV0ZSBvcHRzLmNocm9tZU9wdGlvbnMuQXJndW1lbnRzO1xuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKCdQcmVjYWxjdWxhdGVkIENocm9tZWRyaXZlciBjYXBhYmlsaXRpZXM6ICcgK1xuICAgIEpTT04uc3RyaW5naWZ5KGNhcHMuY2hyb21lT3B0aW9ucywgbnVsbCwgMikpO1xuXG4gIGNvbnN0IHByb3RlY3RlZENhcE5hbWVzID0gW107XG4gIGZvciAoY29uc3QgW29wdCwgdmFsXSBvZiBfLnRvUGFpcnMob3B0cy5jaHJvbWVPcHRpb25zKSkge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKGNhcHMuY2hyb21lT3B0aW9uc1tvcHRdKSkge1xuICAgICAgY2Fwcy5jaHJvbWVPcHRpb25zW29wdF0gPSB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3RlY3RlZENhcE5hbWVzLnB1c2gob3B0KTtcbiAgICB9XG4gIH1cbiAgaWYgKCFfLmlzRW1wdHkocHJvdGVjdGVkQ2FwTmFtZXMpKSB7XG4gICAgbG9nZ2VyLmluZm8oJ1RoZSBmb2xsb3dpbmcgQ2hyb21lZHJpdmVyIGNhcGFiaWxpdGllcyBjYW5ub3QgYmUgb3ZlcnJpZGRlbiAnICtcbiAgICAgICdieSB0aGUgcHJvdmlkZWQgY2hyb21lT3B0aW9uczonKTtcbiAgICBmb3IgKGNvbnN0IG9wdE5hbWUgb2YgcHJvdGVjdGVkQ2FwTmFtZXMpIHtcbiAgICAgIGxvZ2dlci5pbmZvKGAgICR7b3B0TmFtZX0gKCR7SlNPTi5zdHJpbmdpZnkob3B0cy5jaHJvbWVPcHRpb25zW29wdE5hbWVdKX0pYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhcHM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuZXhwb3J0IHsgaGVscGVycywgTkFUSVZFX1dJTiwgV0VCVklFV19XSU4sIFdFQlZJRVdfQkFTRSwgQ0hST01JVU1fV0lOLCBLTk9XTl9DSFJPTUVfUEFDS0FHRV9OQU1FUyB9O1xuIl0sImZpbGUiOiJsaWIvd2Vidmlldy1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
