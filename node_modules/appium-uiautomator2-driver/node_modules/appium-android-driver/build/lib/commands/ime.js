"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.isIMEActivated = async function isIMEActivated() {
  return true;
};

commands.availableIMEEngines = async function availableIMEEngines() {
  this.log.debug('Retrieving available IMEs');
  let engines = await this.adb.availableIMEs();
  this.log.debug(`Engines: ${JSON.stringify(engines)}`);
  return engines;
};

commands.getActiveIMEEngine = async function getActiveIMEEngine() {
  this.log.debug('Retrieving current default IME');
  return await this.adb.defaultIME();
};

commands.activateIMEEngine = async function activateIMEEngine(imeId) {
  this.log.debug(`Attempting to activate IME ${imeId}`);
  let availableEngines = await this.adb.availableIMEs();

  if (availableEngines.indexOf(imeId) === -1) {
    this.log.debug('IME not found, failing');
    throw new _baseDriver.errors.IMENotAvailableError();
  }

  this.log.debug('Found installed IME, attempting to activate');
  await this.adb.enableIME(imeId);
  await this.adb.setIME(imeId);
};

commands.deactivateIMEEngine = async function deactivateIMEEngine() {
  let currentEngine = await this.getActiveIMEEngine();
  this.log.debug(`Attempting to deactivate ${currentEngine}`);
  await this.adb.disableIME(currentEngine);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9pbWUuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImlzSU1FQWN0aXZhdGVkIiwiYXZhaWxhYmxlSU1FRW5naW5lcyIsImxvZyIsImRlYnVnIiwiZW5naW5lcyIsImFkYiIsImF2YWlsYWJsZUlNRXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QWN0aXZlSU1FRW5naW5lIiwiZGVmYXVsdElNRSIsImFjdGl2YXRlSU1FRW5naW5lIiwiaW1lSWQiLCJhdmFpbGFibGVFbmdpbmVzIiwiaW5kZXhPZiIsImVycm9ycyIsIklNRU5vdEF2YWlsYWJsZUVycm9yIiwiZW5hYmxlSU1FIiwic2V0SU1FIiwiZGVhY3RpdmF0ZUlNRUVuZ2luZSIsImN1cnJlbnRFbmdpbmUiLCJkaXNhYmxlSU1FIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csY0FBVCxHQUEwQixlQUFlQSxjQUFmLEdBQWlDO0FBRXpELFNBQU8sSUFBUDtBQUNELENBSEQ7O0FBS0FILFFBQVEsQ0FBQ0ksbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsR0FBc0M7QUFDbkUsT0FBS0MsR0FBTCxDQUFTQyxLQUFULENBQWUsMkJBQWY7QUFDQSxNQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVNDLGFBQVQsRUFBcEI7QUFDQSxPQUFLSixHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsWUFBV0ksSUFBSSxDQUFDQyxTQUFMLENBQWVKLE9BQWYsQ0FBd0IsRUFBbkQ7QUFDQSxTQUFPQSxPQUFQO0FBQ0QsQ0FMRDs7QUFPQVAsUUFBUSxDQUFDWSxrQkFBVCxHQUE4QixlQUFlQSxrQkFBZixHQUFxQztBQUNqRSxPQUFLUCxHQUFMLENBQVNDLEtBQVQsQ0FBZSxnQ0FBZjtBQUNBLFNBQU8sTUFBTSxLQUFLRSxHQUFMLENBQVNLLFVBQVQsRUFBYjtBQUNELENBSEQ7O0FBS0FiLFFBQVEsQ0FBQ2MsaUJBQVQsR0FBNkIsZUFBZUEsaUJBQWYsQ0FBa0NDLEtBQWxDLEVBQXlDO0FBQ3BFLE9BQUtWLEdBQUwsQ0FBU0MsS0FBVCxDQUFnQiw4QkFBNkJTLEtBQU0sRUFBbkQ7QUFDQSxNQUFJQyxnQkFBZ0IsR0FBRyxNQUFNLEtBQUtSLEdBQUwsQ0FBU0MsYUFBVCxFQUE3Qjs7QUFDQSxNQUFJTyxnQkFBZ0IsQ0FBQ0MsT0FBakIsQ0FBeUJGLEtBQXpCLE1BQW9DLENBQUMsQ0FBekMsRUFBNEM7QUFDMUMsU0FBS1YsR0FBTCxDQUFTQyxLQUFULENBQWUsd0JBQWY7QUFDQSxVQUFNLElBQUlZLG1CQUFPQyxvQkFBWCxFQUFOO0FBQ0Q7O0FBQ0QsT0FBS2QsR0FBTCxDQUFTQyxLQUFULENBQWUsNkNBQWY7QUFDQSxRQUFNLEtBQUtFLEdBQUwsQ0FBU1ksU0FBVCxDQUFtQkwsS0FBbkIsQ0FBTjtBQUNBLFFBQU0sS0FBS1AsR0FBTCxDQUFTYSxNQUFULENBQWdCTixLQUFoQixDQUFOO0FBQ0QsQ0FWRDs7QUFZQWYsUUFBUSxDQUFDc0IsbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsR0FBc0M7QUFDbkUsTUFBSUMsYUFBYSxHQUFHLE1BQU0sS0FBS1gsa0JBQUwsRUFBMUI7QUFDQSxPQUFLUCxHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsNEJBQTJCaUIsYUFBYyxFQUF6RDtBQUNBLFFBQU0sS0FBS2YsR0FBTCxDQUFTZ0IsVUFBVCxDQUFvQkQsYUFBcEIsQ0FBTjtBQUNELENBSkQ7O0FBTUFFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjeEIsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5pc0lNRUFjdGl2YXRlZCA9IGFzeW5jIGZ1bmN0aW9uIGlzSU1FQWN0aXZhdGVkICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIC8vIElNRSBpcyBhbHdheXMgYWN0aXZhdGVkIG9uIEFuZHJvaWQgZGV2aWNlc1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbW1hbmRzLmF2YWlsYWJsZUlNRUVuZ2luZXMgPSBhc3luYyBmdW5jdGlvbiBhdmFpbGFibGVJTUVFbmdpbmVzICgpIHtcbiAgdGhpcy5sb2cuZGVidWcoJ1JldHJpZXZpbmcgYXZhaWxhYmxlIElNRXMnKTtcbiAgbGV0IGVuZ2luZXMgPSBhd2FpdCB0aGlzLmFkYi5hdmFpbGFibGVJTUVzKCk7XG4gIHRoaXMubG9nLmRlYnVnKGBFbmdpbmVzOiAke0pTT04uc3RyaW5naWZ5KGVuZ2luZXMpfWApO1xuICByZXR1cm4gZW5naW5lcztcbn07XG5cbmNvbW1hbmRzLmdldEFjdGl2ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2ZUlNRUVuZ2luZSAoKSB7XG4gIHRoaXMubG9nLmRlYnVnKCdSZXRyaWV2aW5nIGN1cnJlbnQgZGVmYXVsdCBJTUUnKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYWRiLmRlZmF1bHRJTUUoKTtcbn07XG5cbmNvbW1hbmRzLmFjdGl2YXRlSU1FRW5naW5lID0gYXN5bmMgZnVuY3Rpb24gYWN0aXZhdGVJTUVFbmdpbmUgKGltZUlkKSB7XG4gIHRoaXMubG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGFjdGl2YXRlIElNRSAke2ltZUlkfWApO1xuICBsZXQgYXZhaWxhYmxlRW5naW5lcyA9IGF3YWl0IHRoaXMuYWRiLmF2YWlsYWJsZUlNRXMoKTtcbiAgaWYgKGF2YWlsYWJsZUVuZ2luZXMuaW5kZXhPZihpbWVJZCkgPT09IC0xKSB7XG4gICAgdGhpcy5sb2cuZGVidWcoJ0lNRSBub3QgZm91bmQsIGZhaWxpbmcnKTtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLklNRU5vdEF2YWlsYWJsZUVycm9yKCk7XG4gIH1cbiAgdGhpcy5sb2cuZGVidWcoJ0ZvdW5kIGluc3RhbGxlZCBJTUUsIGF0dGVtcHRpbmcgdG8gYWN0aXZhdGUnKTtcbiAgYXdhaXQgdGhpcy5hZGIuZW5hYmxlSU1FKGltZUlkKTtcbiAgYXdhaXQgdGhpcy5hZGIuc2V0SU1FKGltZUlkKTtcbn07XG5cbmNvbW1hbmRzLmRlYWN0aXZhdGVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiBkZWFjdGl2YXRlSU1FRW5naW5lICgpIHtcbiAgbGV0IGN1cnJlbnRFbmdpbmUgPSBhd2FpdCB0aGlzLmdldEFjdGl2ZUlNRUVuZ2luZSgpO1xuICB0aGlzLmxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBkZWFjdGl2YXRlICR7Y3VycmVudEVuZ2luZX1gKTtcbiAgYXdhaXQgdGhpcy5hZGIuZGlzYWJsZUlNRShjdXJyZW50RW5naW5lKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9pbWUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
