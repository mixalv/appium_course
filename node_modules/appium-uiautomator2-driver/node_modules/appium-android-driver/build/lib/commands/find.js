"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

let helpers = {},
    extensions = {};
exports.helpers = helpers;

helpers.doFindElementOrEls = async function doFindElementOrEls(params) {
  return await this.bootstrap.sendAction('find', params);
};

helpers.findElOrEls = async function findElOrEls(strategy, selector, mult, context = '') {
  if (!selector) {
    throw new Error('Must provide a selector when finding elements');
  }

  let params = {
    strategy,
    selector,
    context,
    multiple: mult
  };
  let element;

  let doFind = async () => {
    try {
      element = await this.doFindElementOrEls(params);
    } catch (err) {
      if ((0, _baseDriver.isErrorType)(err, _baseDriver.errors.ProxyRequestError)) {
        err = err.getActualError();
      }

      if ((0, _baseDriver.isErrorType)(err, _baseDriver.errors.NoSuchElementError)) {
        return false;
      }

      throw err;
    }

    return !_lodash.default.isEmpty(element);
  };

  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      element = [];
    } else {
      throw err;
    }
  }

  if (mult) {
    return element;
  }

  if (_lodash.default.isEmpty(element)) {
    throw new _baseDriver.errors.NoSuchElementError();
  }

  return element;
};

Object.assign(extensions, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZG9GaW5kRWxlbWVudE9yRWxzIiwicGFyYW1zIiwiYm9vdHN0cmFwIiwic2VuZEFjdGlvbiIsImZpbmRFbE9yRWxzIiwic3RyYXRlZ3kiLCJzZWxlY3RvciIsIm11bHQiLCJjb250ZXh0IiwiRXJyb3IiLCJtdWx0aXBsZSIsImVsZW1lbnQiLCJkb0ZpbmQiLCJlcnIiLCJlcnJvcnMiLCJQcm94eVJlcXVlc3RFcnJvciIsImdldEFjdHVhbEVycm9yIiwiTm9TdWNoRWxlbWVudEVycm9yIiwiXyIsImlzRW1wdHkiLCJpbXBsaWNpdFdhaXRGb3JDb25kaXRpb24iLCJtZXNzYWdlIiwibWF0Y2giLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsSUFBSUEsT0FBTyxHQUFHLEVBQWQ7QUFBQSxJQUFrQkMsVUFBVSxHQUFHLEVBQS9COzs7QUFRQUQsT0FBTyxDQUFDRSxrQkFBUixHQUE2QixlQUFlQSxrQkFBZixDQUFtQ0MsTUFBbkMsRUFBMkM7QUFDdEUsU0FBTyxNQUFNLEtBQUtDLFNBQUwsQ0FBZUMsVUFBZixDQUEwQixNQUExQixFQUFrQ0YsTUFBbEMsQ0FBYjtBQUNELENBRkQ7O0FBUUFILE9BQU8sQ0FBQ00sV0FBUixHQUFzQixlQUFlQSxXQUFmLENBQTRCQyxRQUE1QixFQUFzQ0MsUUFBdEMsRUFBZ0RDLElBQWhELEVBQXNEQyxPQUFPLEdBQUcsRUFBaEUsRUFBb0U7QUFDeEYsTUFBSSxDQUFDRixRQUFMLEVBQWU7QUFDYixVQUFNLElBQUlHLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSVIsTUFBTSxHQUFHO0FBQ1hJLElBQUFBLFFBRFc7QUFFWEMsSUFBQUEsUUFGVztBQUdYRSxJQUFBQSxPQUhXO0FBSVhFLElBQUFBLFFBQVEsRUFBRUg7QUFKQyxHQUFiO0FBT0EsTUFBSUksT0FBSjs7QUFDQSxNQUFJQyxNQUFNLEdBQUcsWUFBWTtBQUN2QixRQUFJO0FBQ0ZELE1BQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUtYLGtCQUFMLENBQXdCQyxNQUF4QixDQUFoQjtBQUNELEtBRkQsQ0FFRSxPQUFPWSxHQUFQLEVBQVk7QUFJWixVQUFJLDZCQUFZQSxHQUFaLEVBQWlCQyxtQkFBT0MsaUJBQXhCLENBQUosRUFBZ0Q7QUFDOUNGLFFBQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDRyxjQUFKLEVBQU47QUFDRDs7QUFLRCxVQUFJLDZCQUFZSCxHQUFaLEVBQWlCQyxtQkFBT0csa0JBQXhCLENBQUosRUFBaUQ7QUFFL0MsZUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsWUFBTUosR0FBTjtBQUNEOztBQUdELFdBQU8sQ0FBQ0ssZ0JBQUVDLE9BQUYsQ0FBVVIsT0FBVixDQUFSO0FBQ0QsR0F2QkQ7O0FBeUJBLE1BQUk7QUFDRixVQUFNLEtBQUtTLHdCQUFMLENBQThCUixNQUE5QixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFFBQUlBLEdBQUcsQ0FBQ1EsT0FBSixJQUFlUixHQUFHLENBQUNRLE9BQUosQ0FBWUMsS0FBWixDQUFrQixpQkFBbEIsQ0FBbkIsRUFBeUQ7QUFHdkRYLE1BQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0QsS0FKRCxNQUlPO0FBQ0wsWUFBTUUsR0FBTjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSU4sSUFBSixFQUFVO0FBQ1IsV0FBT0ksT0FBUDtBQUNEOztBQUNELE1BQUlPLGdCQUFFQyxPQUFGLENBQVVSLE9BQVYsQ0FBSixFQUF3QjtBQUN0QixVQUFNLElBQUlHLG1CQUFPRyxrQkFBWCxFQUFOO0FBQ0Q7O0FBQ0QsU0FBT04sT0FBUDtBQUNELENBekREOztBQTJEQVksTUFBTSxDQUFDQyxNQUFQLENBQWN6QixVQUFkLEVBQTBCRCxPQUExQjtlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycywgaXNFcnJvclR5cGUgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcblxuXG5sZXQgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8qKlxuICogUmVhc29uIGZvciBpc29sYXRpbmcgZG9GaW5kRWxlbWVudE9yRWxzIGZyb20gZmluZEVsT3JFbHMgaXMgZm9yIHJldXNpbmcgZmluZEVsT3JFbHNcbiAqIGFjcm9zcyBhbmRyb2lkLWRyaXZlcnMgKGxpa2UgYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXIpIHRvIGF2b2lkIGNvZGUgZHVwbGljYXRpb24uXG4gKiBPdGhlciBhbmRyb2lkLWRyaXZlcnMgKGxpa2UgYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXIpIG5lZWQgdG8gb3ZlcnJpZGUgZG9GaW5kRWxlbWVudE9yRWxzXG4gKiB0byBmYWNpbGl0YXRlIGZpbmRFbE9yRWxzLlxuICovXG5oZWxwZXJzLmRvRmluZEVsZW1lbnRPckVscyA9IGFzeW5jIGZ1bmN0aW9uIGRvRmluZEVsZW1lbnRPckVscyAocGFyYW1zKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmJvb3RzdHJhcC5zZW5kQWN0aW9uKCdmaW5kJywgcGFyYW1zKTtcbn07XG5cbi8vIHN0YXRlZ3k6IGxvY2F0b3Igc3RyYXRlZ3lcbi8vIHNlbGVjdG9yOiB0aGUgYWN0dWFsIHNlbGVjdG9yIGZvciBmaW5kaW5nIGFuIGVsZW1lbnRcbi8vIG11bHQ6IG11bHRpcGxlIGVsZW1lbnRzIG9yIGp1c3Qgb25lP1xuLy8gY29udGV4dDogZmluZGluZyBhbiBlbGVtZW50IGZyb20gdGhlIHJvb3QgY29udGV4dD8gb3Igc3RhcnRpbmcgZnJvbSBhbm90aGVyIGVsZW1lbnRcbmhlbHBlcnMuZmluZEVsT3JFbHMgPSBhc3luYyBmdW5jdGlvbiBmaW5kRWxPckVscyAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0ID0gJycpIHtcbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgc2VsZWN0b3Igd2hlbiBmaW5kaW5nIGVsZW1lbnRzJyk7XG4gIH1cblxuICBsZXQgcGFyYW1zID0ge1xuICAgIHN0cmF0ZWd5LFxuICAgIHNlbGVjdG9yLFxuICAgIGNvbnRleHQsXG4gICAgbXVsdGlwbGU6IG11bHRcbiAgfTtcblxuICBsZXQgZWxlbWVudDtcbiAgbGV0IGRvRmluZCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgZWxlbWVudCA9IGF3YWl0IHRoaXMuZG9GaW5kRWxlbWVudE9yRWxzKHBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICAgIC8vIGlmIHRoZSBlcnJvciB0aGF0IGNvbWVzIGJhY2sgaXMgZnJvbSBhIHByb3hpZWQgcmVxdWVzdCwgd2UgbmVlZCB0b1xuICAgICAgLy8gdW53cmFwIGl0IHRvIGl0cyBhY3R1YWwgcHJvdG9jb2wgZXJyb3IgZmlyc3RcbiAgICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Qcm94eVJlcXVlc3RFcnJvcikpIHtcbiAgICAgICAgZXJyID0gZXJyLmdldEFjdHVhbEVycm9yKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXgtYXNzaWduXG4gICAgICB9XG5cbiAgICAgIC8vIG5vdyB3ZSBoYXZlIHRvIGluc3BlY3QgdGhlIGVycm9yIHRvIGRldGVybWluZSBpZiBpdCBpcyBhIG5vIHN1Y2hcbiAgICAgIC8vIGVsZW1lbnQgZXJyb3IsIGJhc2VkIG9uIHRoZSBzaGFwZSBvZiB0aGUgZXJyb3Igb2JqZWN0IGZyb21cbiAgICAgIC8vIEBhcHBpdW0vYmFzZS1kcml2ZXJcbiAgICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IpKSB7XG4gICAgICAgIC8vIHdlIGFyZSBmaW5lIHdpdGggdGhpcywganVzdCBpbmRpY2F0ZSBhIHJldHJ5XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICAvLyB3ZSB3YW50IHRvIHJldHVybiBmYWxzZSBpZiB3ZSB3YW50IHRvIHBvdGVudGlhbGx5IHRyeSBhZ2FpblxuICAgIHJldHVybiAhXy5pc0VtcHR5KGVsZW1lbnQpO1xuICB9O1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5pbXBsaWNpdFdhaXRGb3JDb25kaXRpb24oZG9GaW5kKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLm1hdGNoKC9Db25kaXRpb24gdW5tZXQvKSkge1xuICAgICAgLy8gb25seSBnZXQgaGVyZSBpZiB3ZSBhcmUgbG9va2luZyBmb3IgbXVsdGlwbGUgZWxlbWVudHNcbiAgICAgIC8vIGNvbmRpdGlvbiB3YXMgbm90IG1ldCBzZXR0aW5nIHJlcyB0byBlbXB0eSBhcnJheVxuICAgICAgZWxlbWVudCA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11bHQpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICBpZiAoXy5pc0VtcHR5KGVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IoKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaGVscGVycyk7XG5leHBvcnQgeyBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZmluZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
