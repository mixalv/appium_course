"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _support = require("@appium/support");

var _baseDriver = require("@appium/base-driver");

const ADB_SHELL_FEATURE = 'adb_shell';
let commands = {};
exports.commands = commands;

commands.mobileShell = async function mobileShell(opts = {}) {
  this.ensureFeatureEnabled(ADB_SHELL_FEATURE);
  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;

  if (!_lodash.default.isString(command)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'command' argument is mandatory`);
  }

  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];
  this.log.debug(`Running '${this.adb.executable.path} ${_support.util.quote(adbArgs)}'`);

  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });

    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }

    return stdout;
  } catch (err) {
    this.log.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJuYW1lcyI6WyJBREJfU0hFTExfRkVBVFVSRSIsImNvbW1hbmRzIiwibW9iaWxlU2hlbGwiLCJvcHRzIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJjb21tYW5kIiwiYXJncyIsInRpbWVvdXQiLCJpbmNsdWRlU3RkZXJyIiwiXyIsImlzU3RyaW5nIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJhZGJBcmdzIiwiYWRiIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwiaXNBcnJheSIsImxvZyIsImRlYnVnIiwicGF0aCIsInV0aWwiLCJxdW90ZSIsInN0ZG91dCIsInN0ZGVyciIsImVyciIsImVycm9yQW5kVGhyb3ciLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGlCQUFpQixHQUFHLFdBQTFCO0FBRUEsSUFBSUMsUUFBUSxHQUFHLEVBQWY7OztBQUVBQSxRQUFRLENBQUNDLFdBQVQsR0FBdUIsZUFBZUEsV0FBZixDQUE0QkMsSUFBSSxHQUFHLEVBQW5DLEVBQXVDO0FBQzVELE9BQUtDLG9CQUFMLENBQTBCSixpQkFBMUI7QUFFQSxRQUFNO0FBQ0pLLElBQUFBLE9BREk7QUFFSkMsSUFBQUEsSUFBSSxHQUFHLEVBRkg7QUFHSkMsSUFBQUEsT0FBTyxHQUFHLEtBSE47QUFJSkMsSUFBQUE7QUFKSSxNQUtGTCxJQUxKOztBQU9BLE1BQUksQ0FBQ00sZ0JBQUVDLFFBQUYsQ0FBV0wsT0FBWCxDQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSU0sbUJBQU9DLG9CQUFYLENBQWlDLHFDQUFqQyxDQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsT0FBTyxHQUFHLENBQ2QsR0FBRyxLQUFLQyxHQUFMLENBQVNDLFVBQVQsQ0FBb0JDLFdBRFQsRUFFZCxPQUZjLEVBR2RYLE9BSGMsRUFJZCxJQUFJSSxnQkFBRVEsT0FBRixDQUFVWCxJQUFWLElBQWtCQSxJQUFsQixHQUF5QixDQUFDQSxJQUFELENBQTdCLENBSmMsQ0FBaEI7QUFNQSxPQUFLWSxHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsWUFBVyxLQUFLTCxHQUFMLENBQVNDLFVBQVQsQ0FBb0JLLElBQUssSUFBR0MsY0FBS0MsS0FBTCxDQUFXVCxPQUFYLENBQW9CLEdBQTNFOztBQUNBLE1BQUk7QUFDRixVQUFNO0FBQUNVLE1BQUFBLE1BQUQ7QUFBU0MsTUFBQUE7QUFBVCxRQUFtQixNQUFNLHdCQUFLLEtBQUtWLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkssSUFBekIsRUFBK0JQLE9BQS9CLEVBQXdDO0FBQUNOLE1BQUFBO0FBQUQsS0FBeEMsQ0FBL0I7O0FBQ0EsUUFBSUMsYUFBSixFQUFtQjtBQUNqQixhQUFPO0FBQ0xlLFFBQUFBLE1BREs7QUFFTEMsUUFBQUE7QUFGSyxPQUFQO0FBSUQ7O0FBQ0QsV0FBT0QsTUFBUDtBQUNELEdBVEQsQ0FTRSxPQUFPRSxHQUFQLEVBQVk7QUFDWixTQUFLUCxHQUFMLENBQVNRLGFBQVQsQ0FBd0IsdUJBQXNCckIsT0FBUSxtQkFBL0IsR0FDcEIsbUJBQWtCb0IsR0FBRyxDQUFDRSxPQUFRLElBRFYsR0FFcEIsV0FBVUYsR0FBRyxDQUFDRixNQUFPLGFBQVlFLEdBQUcsQ0FBQ0QsTUFBTyxFQUYvQztBQUdEO0FBQ0YsQ0FuQ0Q7O2VBc0NldkIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5cbmNvbnN0IEFEQl9TSEVMTF9GRUFUVVJFID0gJ2FkYl9zaGVsbCc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5tb2JpbGVTaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNoZWxsIChvcHRzID0ge30pIHtcbiAgdGhpcy5lbnN1cmVGZWF0dXJlRW5hYmxlZChBREJfU0hFTExfRkVBVFVSRSk7XG5cbiAgY29uc3Qge1xuICAgIGNvbW1hbmQsXG4gICAgYXJncyA9IFtdLFxuICAgIHRpbWVvdXQgPSAyMDAwMCxcbiAgICBpbmNsdWRlU3RkZXJyLFxuICB9ID0gb3B0cztcblxuICBpZiAoIV8uaXNTdHJpbmcoY29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgJ2NvbW1hbmQnIGFyZ3VtZW50IGlzIG1hbmRhdG9yeWApO1xuICB9XG5cbiAgY29uc3QgYWRiQXJncyA9IFtcbiAgICAuLi50aGlzLmFkYi5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLFxuICAgICdzaGVsbCcsXG4gICAgY29tbWFuZCxcbiAgICAuLi4oXy5pc0FycmF5KGFyZ3MpID8gYXJncyA6IFthcmdzXSlcbiAgXTtcbiAgdGhpcy5sb2cuZGVidWcoYFJ1bm5pbmcgJyR7dGhpcy5hZGIuZXhlY3V0YWJsZS5wYXRofSAke3V0aWwucXVvdGUoYWRiQXJncyl9J2ApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKHRoaXMuYWRiLmV4ZWN1dGFibGUucGF0aCwgYWRiQXJncywge3RpbWVvdXR9KTtcbiAgICBpZiAoaW5jbHVkZVN0ZGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRoaXMubG9nLmVycm9yQW5kVGhyb3coYENhbm5vdCBleGVjdXRlIHRoZSAnJHtjb21tYW5kfScgc2hlbGwgY29tbWFuZC4gYCArXG4gICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9LiBgICtcbiAgICAgIGBTdGRPdXQ6ICR7ZXJyLnN0ZG91dH0uIFN0ZEVycjogJHtlcnIuc3RkZXJyfWApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9zaGVsbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
