#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webviewHelpers = exports.startServer = exports.default = exports.commonCapConstraints = exports.androidHelpers = exports.androidCommands = exports.WEBVIEW_WIN = exports.WEBVIEW_BASE = exports.SETTINGS_HELPER_PKG_ID = exports.NATIVE_WIN = exports.CHROMIUM_WIN = exports.AndroidDriver = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var server = _interopRequireWildcard(require("./lib/server"));

var driver = _interopRequireWildcard(require("./lib/driver"));

var androidHelperIndex = _interopRequireWildcard(require("./lib/android-helpers"));

var commandIndex = _interopRequireWildcard(require("./lib/commands/index"));

var webview = _interopRequireWildcard(require("./lib/webview-helpers"));

var caps = _interopRequireWildcard(require("./lib/desired-caps"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  startServer
} = server;
exports.startServer = startServer;
const DEFAULT_HOST = 'localhost';
const DEFAULT_PORT = 4723;

async function main() {
  const getArgValue = argName => {
    const argIndex = process.argv.indexOf(argName);
    return argIndex > 0 ? process.argv[argIndex + 1] : null;
  };

  const port = parseInt(getArgValue('--port'), 10) || DEFAULT_PORT;
  const host = getArgValue('--host') || DEFAULT_HOST;
  return await startServer(port, host);
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}

const {
  AndroidDriver
} = driver;
exports.AndroidDriver = AndroidDriver;
const {
  helpers: webviewHelpers,
  NATIVE_WIN,
  WEBVIEW_WIN,
  WEBVIEW_BASE,
  CHROMIUM_WIN
} = webview;
exports.CHROMIUM_WIN = CHROMIUM_WIN;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.NATIVE_WIN = NATIVE_WIN;
exports.webviewHelpers = webviewHelpers;
const {
  commonCapConstraints
} = caps;
exports.commonCapConstraints = commonCapConstraints;
const {
  commands: androidCommands
} = commandIndex;
exports.androidCommands = androidCommands;
const {
  helpers: androidHelpers,
  SETTINGS_HELPER_PKG_ID
} = androidHelperIndex;
exports.SETTINGS_HELPER_PKG_ID = SETTINGS_HELPER_PKG_ID;
exports.androidHelpers = androidHelpers;
var _default = AndroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0YXJ0U2VydmVyIiwic2VydmVyIiwiREVGQVVMVF9IT1NUIiwiREVGQVVMVF9QT1JUIiwibWFpbiIsImdldEFyZ1ZhbHVlIiwiYXJnTmFtZSIsImFyZ0luZGV4IiwicHJvY2VzcyIsImFyZ3YiLCJpbmRleE9mIiwicG9ydCIsInBhcnNlSW50IiwiaG9zdCIsInJlcXVpcmUiLCJtb2R1bGUiLCJBbmRyb2lkRHJpdmVyIiwiZHJpdmVyIiwiaGVscGVycyIsIndlYnZpZXdIZWxwZXJzIiwiTkFUSVZFX1dJTiIsIldFQlZJRVdfV0lOIiwiV0VCVklFV19CQVNFIiwiQ0hST01JVU1fV0lOIiwid2VidmlldyIsImNvbW1vbkNhcENvbnN0cmFpbnRzIiwiY2FwcyIsImNvbW1hbmRzIiwiYW5kcm9pZENvbW1hbmRzIiwiY29tbWFuZEluZGV4IiwiYW5kcm9pZEhlbHBlcnMiLCJTRVRUSU5HU19IRUxQRVJfUEtHX0lEIiwiYW5kcm9pZEhlbHBlckluZGV4Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQXVCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBeEJBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFrQkMsTUFBeEI7O0FBRUEsTUFBTUMsWUFBWSxHQUFHLFdBQXJCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQXJCOztBQUVBLGVBQWVDLElBQWYsR0FBdUI7QUFDckIsUUFBTUMsV0FBVyxHQUFJQyxPQUFELElBQWE7QUFDL0IsVUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUNDLElBQVIsQ0FBYUMsT0FBYixDQUFxQkosT0FBckIsQ0FBakI7QUFDQSxXQUFPQyxRQUFRLEdBQUcsQ0FBWCxHQUFlQyxPQUFPLENBQUNDLElBQVIsQ0FBYUYsUUFBUSxHQUFHLENBQXhCLENBQWYsR0FBNEMsSUFBbkQ7QUFDRCxHQUhEOztBQUlBLFFBQU1JLElBQUksR0FBR0MsUUFBUSxDQUFDUCxXQUFXLENBQUMsUUFBRCxDQUFaLEVBQXdCLEVBQXhCLENBQVIsSUFBdUNGLFlBQXBEO0FBQ0EsUUFBTVUsSUFBSSxHQUFHUixXQUFXLENBQUMsUUFBRCxDQUFYLElBQXlCSCxZQUF0QztBQUNBLFNBQU8sTUFBTUYsV0FBVyxDQUFDVyxJQUFELEVBQU9FLElBQVAsQ0FBeEI7QUFDRDs7QUFFRCxJQUFJQyxPQUFPLENBQUNWLElBQVIsS0FBaUJXLE1BQXJCLEVBQTZCO0FBQzNCLDBCQUFTWCxJQUFUO0FBQ0Q7O0FBVUQsTUFBTTtBQUFFWSxFQUFBQTtBQUFGLElBQW9CQyxNQUExQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLE9BQU8sRUFBRUMsY0FBWDtBQUEyQkMsRUFBQUEsVUFBM0I7QUFBdUNDLEVBQUFBLFdBQXZDO0FBQW9EQyxFQUFBQSxZQUFwRDtBQUNFQyxFQUFBQTtBQURGLElBQ21CQyxPQUR6Qjs7Ozs7O0FBRUEsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCQyxJQUFqQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQVEsRUFBRUM7QUFBWixJQUFnQ0MsWUFBdEM7O0FBQ0EsTUFBTTtBQUFFWCxFQUFBQSxPQUFPLEVBQUVZLGNBQVg7QUFBMkJDLEVBQUFBO0FBQTNCLElBQXNEQyxrQkFBNUQ7OztlQUdlaEIsYSIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8vIHRyYW5zcGlsZTptYWluXG5cbmltcG9ydCB7IGFzeW5jaWZ5IH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0ICogYXMgc2VydmVyIGZyb20gJy4vbGliL3NlcnZlcic7XG5cblxuY29uc3QgeyBzdGFydFNlcnZlciB9ID0gc2VydmVyO1xuXG5jb25zdCBERUZBVUxUX0hPU1QgPSAnbG9jYWxob3N0JztcbmNvbnN0IERFRkFVTFRfUE9SVCA9IDQ3MjM7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4gKCkge1xuICBjb25zdCBnZXRBcmdWYWx1ZSA9IChhcmdOYW1lKSA9PiB7XG4gICAgY29uc3QgYXJnSW5kZXggPSBwcm9jZXNzLmFyZ3YuaW5kZXhPZihhcmdOYW1lKTtcbiAgICByZXR1cm4gYXJnSW5kZXggPiAwID8gcHJvY2Vzcy5hcmd2W2FyZ0luZGV4ICsgMV0gOiBudWxsO1xuICB9O1xuICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoZ2V0QXJnVmFsdWUoJy0tcG9ydCcpLCAxMCkgfHwgREVGQVVMVF9QT1JUO1xuICBjb25zdCBob3N0ID0gZ2V0QXJnVmFsdWUoJy0taG9zdCcpIHx8IERFRkFVTFRfSE9TVDtcbiAgcmV0dXJuIGF3YWl0IHN0YXJ0U2VydmVyKHBvcnQsIGhvc3QpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgYXN5bmNpZnkobWFpbik7XG59XG5cblxuaW1wb3J0ICogYXMgZHJpdmVyIGZyb20gJy4vbGliL2RyaXZlcic7XG5pbXBvcnQgKiBhcyBhbmRyb2lkSGVscGVySW5kZXggZnJvbSAnLi9saWIvYW5kcm9pZC1oZWxwZXJzJztcbmltcG9ydCAqIGFzIGNvbW1hbmRJbmRleCBmcm9tICcuL2xpYi9jb21tYW5kcy9pbmRleCc7XG5pbXBvcnQgKiBhcyB3ZWJ2aWV3IGZyb20gJy4vbGliL3dlYnZpZXctaGVscGVycyc7XG5pbXBvcnQgKiBhcyBjYXBzIGZyb20gJy4vbGliL2Rlc2lyZWQtY2Fwcyc7XG5cblxuY29uc3QgeyBBbmRyb2lkRHJpdmVyIH0gPSBkcml2ZXI7XG5jb25zdCB7IGhlbHBlcnM6IHdlYnZpZXdIZWxwZXJzLCBOQVRJVkVfV0lOLCBXRUJWSUVXX1dJTiwgV0VCVklFV19CQVNFLFxuICAgICAgICBDSFJPTUlVTV9XSU4gfSA9IHdlYnZpZXc7XG5jb25zdCB7IGNvbW1vbkNhcENvbnN0cmFpbnRzIH0gPSBjYXBzO1xuY29uc3QgeyBjb21tYW5kczogYW5kcm9pZENvbW1hbmRzIH0gPSBjb21tYW5kSW5kZXg7XG5jb25zdCB7IGhlbHBlcnM6IGFuZHJvaWRIZWxwZXJzLCBTRVRUSU5HU19IRUxQRVJfUEtHX0lEIH0gPSBhbmRyb2lkSGVscGVySW5kZXg7XG5cblxuZXhwb3J0IGRlZmF1bHQgQW5kcm9pZERyaXZlcjtcbmV4cG9ydCB7XG4gIGFuZHJvaWRIZWxwZXJzLCBhbmRyb2lkQ29tbWFuZHMsIEFuZHJvaWREcml2ZXIsIHN0YXJ0U2VydmVyLFxuICBjb21tb25DYXBDb25zdHJhaW50cywgd2Vidmlld0hlbHBlcnMsIE5BVElWRV9XSU4sIFdFQlZJRVdfV0lOLFxuICBXRUJWSUVXX0JBU0UsIENIUk9NSVVNX1dJTiwgU0VUVElOR1NfSEVMUEVSX1BLR19JRCxcbn07XG4iXSwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uIn0=
