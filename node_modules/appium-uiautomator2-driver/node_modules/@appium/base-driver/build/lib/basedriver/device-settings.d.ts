export default DeviceSettings;
export type IDeviceSettings<T> = import('@appium/types').DeviceSettings<T>;
/**
 * @template {Record<string,unknown>} T
 * @implements {IDeviceSettings<T>}
 */
export class DeviceSettings<T extends Record<string, unknown>> implements IDeviceSettings<T> {
    /**
     * `onSettingsUpdate` is _required_ if settings will ever be updated; otherwise
     * an error will occur at runtime.
     * @param {T} [defaultSettings]
     * @param {import('@appium/types').SettingsUpdateListener<T>} [onSettingsUpdate]
     */
    constructor(defaultSettings?: T | undefined, onSettingsUpdate?: import("@appium/types").SettingsUpdateListener<T> | undefined);
    /**
     * @protected
     * @type {T}
     */
    protected _settings: T;
    /**
     * @protected
     * @type {import('@appium/types').SettingsUpdateListener<T>|undefined}
     */
    protected _onSettingsUpdate: import('@appium/types').SettingsUpdateListener<T> | undefined;
    /**
     * calls updateSettings from implementing driver every time a setting is changed.
     * @param {T} newSettings
     */
    update(newSettings: T): Promise<void>;
    getSettings(): T;
}
//# sourceMappingURL=device-settings.d.ts.map