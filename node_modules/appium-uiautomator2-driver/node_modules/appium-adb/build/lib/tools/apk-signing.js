"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _fs2 = _interopRequireDefault(require("fs"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _support = require("@appium/support");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _helpers = require("../helpers.js");

const DEFAULT_PRIVATE_KEY = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.pk8');

const DEFAULT_CERTIFICATE = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.x509.pem');

const BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';
const APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';
const SHA1 = 'sha1';
const SHA256 = 'sha256';
const SHA512 = 'sha512';
const MD5 = 'md5';
const DEFAULT_CERT_HASH = {
  [SHA256]: 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc'
};
const JAVA_PROPS_INIT_ERROR = 'java.lang.Error: Properties init';
const SIGNED_APPS_CACHE = new _lruCache.default({
  max: 30
});
const apkSigningMethods = {};

apkSigningMethods.executeApksigner = async function executeApksigner(args = []) {
  const apkSignerJar = await (0, _helpers.getApksignerForOs)(this);
  const fullCmd = [await (0, _helpers.getJavaForOs)(), '-Xmx1024M', '-Xss1m', '-jar', apkSignerJar, ...args];

  _logger.default.debug(`Starting apksigner: ${_support.util.quote(fullCmd)}`);

  const {
    stdout,
    stderr
  } = await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1), {
    cwd: _path.default.dirname(apkSignerJar),
    windowsVerbatimArguments: _support.system.isWindows()
  });

  for (let [name, stream] of [['stdout', stdout], ['stderr', stderr]]) {
    if (!_lodash.default.trim(stream)) {
      continue;
    }

    if (name === 'stdout') {
      stream = stream.split('\n').filter(line => !line.includes('WARNING:')).join('\n');
    }

    _logger.default.debug(`apksigner ${name}: ${stream}`);
  }

  return stdout;
};

apkSigningMethods.signWithDefaultCert = async function signWithDefaultCert(apk) {
  _logger.default.debug(`Signing '${apk}' with default cert`);

  if (!(await _support.fs.exists(apk))) {
    throw new Error(`${apk} file doesn't exist.`);
  }

  const args = ['sign', '--key', DEFAULT_PRIVATE_KEY, '--cert', DEFAULT_CERTIFICATE, apk];

  try {
    await this.executeApksigner(args);
  } catch (e) {
    throw new Error(`Could not sign '${apk}' with the default certificate. ` + `Original error: ${e.stderr || e.stdout || e.message}`);
  }
};

apkSigningMethods.signWithCustomCert = async function signWithCustomCert(apk) {
  _logger.default.debug(`Signing '${apk}' with custom cert`);

  if (!(await _support.fs.exists(this.keystorePath))) {
    throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);
  }

  if (!(await _support.fs.exists(apk))) {
    throw new Error(`'${apk}' doesn't exist.`);
  }

  try {
    await this.executeApksigner(['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', `pass:${this.keystorePassword}`, '--key-pass', `pass:${this.keyPassword}`, apk]);
  } catch (err) {
    _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` + `Original error: ${err.stderr || err.stdout || err.message}`);

    try {
      if (await (0, _helpers.unsignApk)(apk)) {
        _logger.default.debug(`'${apk}' has been successfully unsigned`);
      } else {
        _logger.default.debug(`'${apk}' does not need to be unsigned`);
      }

      const jarsigner = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `jarsigner${_support.system.isWindows() ? '.exe' : ''}`);

      const fullCmd = [jarsigner, '-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias];

      _logger.default.debug(`Starting jarsigner: ${_support.util.quote(fullCmd)}`);

      await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1), {
        windowsVerbatimArguments: _support.system.isWindows()
      });
    } catch (e) {
      throw new Error(`Could not sign with custom certificate. ` + `Original error: ${e.stderr || e.message}`);
    }
  }
};

apkSigningMethods.sign = async function sign(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    let message = 'Signing of .apks-files is not supported. ';

    if (this.useKeystore) {
      message += 'Consider manual application bundle signing with the custom keystore ' + `like it is described at ${BUNDLETOOL_TUTORIAL}`;
    } else {
      message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` + `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;
    }

    _logger.default.warn(message);

    return;
  }

  await this.zipAlignApk(appPath);

  if (this.useKeystore) {
    await this.signWithCustomCert(appPath);
  } else {
    await this.signWithDefaultCert(appPath);
  }
};

apkSigningMethods.zipAlignApk = async function zipAlignApk(apk) {
  await this.initZipAlign();

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-c', '4', apk]);

    _logger.default.debug(`${apk}' is already zip-aligned. Doing nothing`);

    return false;
  } catch (e) {
    _logger.default.debug(`'${apk}' is not zip-aligned. Aligning`);
  }

  try {
    await _support.fs.access(apk, _fs2.default.W_OK);
  } catch (e) {
    throw new Error(`The file at '${apk}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(apk)}' ` + `for the Appium process, so it can zip-align the file`);
  }

  const alignedApk = await _support.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  await (0, _support.mkdirp)(_path.default.dirname(alignedApk));

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);
    await _support.fs.mv(alignedApk, apk, {
      mkdirp: true
    });
    return true;
  } catch (e) {
    if (await _support.fs.exists(alignedApk)) {
      await _support.fs.unlink(alignedApk);
    }

    throw new Error(`zipAlignApk failed. Original error: ${e.stderr || e.message}`);
  }
};

apkSigningMethods.checkApkCert = async function checkApkCert(appPath, pkg, opts = {}) {
  _logger.default.debug(`Checking app cert for ${appPath}`);

  if (!(await _support.fs.exists(appPath))) {
    _logger.default.debug(`'${appPath}' does not exist`);

    return false;
  }

  if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
    appPath = await this.extractBaseApk(appPath);
  }

  const hashMatches = (apksignerOutput, expectedHashes) => {
    for (const [name, value] of _lodash.default.toPairs(expectedHashes)) {
      if (new RegExp(`digest:\\s+${value}\\b`, 'i').test(apksignerOutput)) {
        _logger.default.debug(`${name} hash did match for '${_path.default.basename(appPath)}'`);

        return true;
      }
    }

    return false;
  };

  const {
    requireDefaultCert = true
  } = opts;
  const appHash = await _support.fs.hash(appPath);

  if (SIGNED_APPS_CACHE.has(appHash)) {
    _logger.default.debug(`Using the previously cached signature entry for '${_path.default.basename(appPath)}'`);

    const {
      keystorePath,
      output,
      expected
    } = SIGNED_APPS_CACHE.get(appHash);

    if (this.useKeystore && this.keystorePath === keystorePath || !this.useKeystore) {
      return !this.useKeystore && !requireDefaultCert || hashMatches(output, expected);
    }
  }

  const expected = this.useKeystore ? await this.getKeystoreHash(appPath, pkg) : DEFAULT_CERT_HASH;

  try {
    await (0, _helpers.getApksignerForOs)(this);
    const output = await this.executeApksigner(['verify', '--print-certs', appPath]);
    const hasMatch = hashMatches(output, expected);

    if (hasMatch) {
      _logger.default.info(`'${appPath}' is signed with the ` + `${this.useKeystore ? 'keystore' : 'default'} certificate`);
    } else {
      _logger.default.info(`'${appPath}' is signed with a ` + `non-${this.useKeystore ? 'keystore' : 'default'} certificate`);
    }

    const isSigned = !this.useKeystore && !requireDefaultCert || hasMatch;

    if (isSigned) {
      SIGNED_APPS_CACHE.set(appHash, {
        output,
        expected,
        keystorePath: this.keystorePath
      });
    }

    return isSigned;
  } catch (err) {
    if (_lodash.default.includes(err.stderr, APKSIGNER_VERIFY_FAIL)) {
      _logger.default.info(`'${appPath}' is not signed`);

      return false;
    }

    const errMsg = err.stderr || err.stdout || err.message;

    if (_lodash.default.includes(errMsg, JAVA_PROPS_INIT_ERROR)) {
      _logger.default.warn(errMsg);

      _logger.default.warn(`Assuming '${appPath}' is already signed and continuing anyway`);

      return true;
    }

    throw new Error(`Cannot verify the signature of '${appPath}'. ` + `Original error: ${errMsg}`);
  }
};

apkSigningMethods.getKeystoreHash = async function getKeystoreHash() {
  _logger.default.debug(`Getting hash of the '${this.keystorePath}' keystore`);

  const keytool = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `keytool${_support.system.isWindows() ? '.exe' : ''}`);

  if (!(await _support.fs.exists(keytool))) {
    throw new Error(`The keytool utility cannot be found at '${keytool}'`);
  }

  const args = ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword];

  _logger.default.info(`Running '${keytool}' with arguments: ${_support.util.quote(args)}`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(keytool, args, {
      windowsVerbatimArguments: _support.system.isWindows()
    });
    const result = {};

    for (const hashName of [SHA512, SHA256, SHA1, MD5]) {
      const hashRe = new RegExp(`^\\s*${hashName}:\\s*([a-f0-9:]+)`, 'mi');
      const match = hashRe.exec(stdout);

      if (!match) {
        continue;
      }

      result[hashName] = match[1].replace(/:/g, '').toLowerCase();
    }

    if (_lodash.default.isEmpty(result)) {
      _logger.default.debug(stdout);

      throw new Error('Cannot parse the hash value from the keytool output');
    }

    _logger.default.debug(`Keystore hash: ${JSON.stringify(result)}`);

    return result;
  } catch (e) {
    throw new Error(`Cannot get the hash of '${this.keystorePath}' keystore. ` + `Original error: ${e.stderr || e.message}`);
  }
};

var _default = apkSigningMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstc2lnbmluZy5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1BSSVZBVEVfS0VZIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9DRVJUSUZJQ0FURSIsIkJVTkRMRVRPT0xfVFVUT1JJQUwiLCJBUEtTSUdORVJfVkVSSUZZX0ZBSUwiLCJTSEExIiwiU0hBMjU2IiwiU0hBNTEyIiwiTUQ1IiwiREVGQVVMVF9DRVJUX0hBU0giLCJKQVZBX1BST1BTX0lOSVRfRVJST1IiLCJTSUdORURfQVBQU19DQUNIRSIsIkxSVSIsIm1heCIsImFwa1NpZ25pbmdNZXRob2RzIiwiZXhlY3V0ZUFwa3NpZ25lciIsImFyZ3MiLCJhcGtTaWduZXJKYXIiLCJmdWxsQ21kIiwibG9nIiwiZGVidWciLCJ1dGlsIiwicXVvdGUiLCJzdGRvdXQiLCJzdGRlcnIiLCJzbGljZSIsImN3ZCIsImRpcm5hbWUiLCJ3aW5kb3dzVmVyYmF0aW1Bcmd1bWVudHMiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJuYW1lIiwic3RyZWFtIiwiXyIsInRyaW0iLCJzcGxpdCIsImZpbHRlciIsImxpbmUiLCJpbmNsdWRlcyIsImpvaW4iLCJzaWduV2l0aERlZmF1bHRDZXJ0IiwiYXBrIiwiZnMiLCJleGlzdHMiLCJFcnJvciIsImUiLCJtZXNzYWdlIiwic2lnbldpdGhDdXN0b21DZXJ0Iiwia2V5c3RvcmVQYXRoIiwia2V5QWxpYXMiLCJrZXlzdG9yZVBhc3N3b3JkIiwia2V5UGFzc3dvcmQiLCJlcnIiLCJ3YXJuIiwiamFyc2lnbmVyIiwic2lnbiIsImFwcFBhdGgiLCJlbmRzV2l0aCIsIkFQS1NfRVhURU5TSU9OIiwidXNlS2V5c3RvcmUiLCJ6aXBBbGlnbkFwayIsImluaXRaaXBBbGlnbiIsImJpbmFyaWVzIiwiemlwYWxpZ24iLCJhY2Nlc3MiLCJfZnMiLCJXX09LIiwiYWxpZ25lZEFwayIsInRlbXBEaXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJtdiIsIm1rZGlycCIsInVubGluayIsImNoZWNrQXBrQ2VydCIsInBrZyIsIm9wdHMiLCJleHRuYW1lIiwiZXh0cmFjdEJhc2VBcGsiLCJoYXNoTWF0Y2hlcyIsImFwa3NpZ25lck91dHB1dCIsImV4cGVjdGVkSGFzaGVzIiwidmFsdWUiLCJ0b1BhaXJzIiwiUmVnRXhwIiwidGVzdCIsImJhc2VuYW1lIiwicmVxdWlyZURlZmF1bHRDZXJ0IiwiYXBwSGFzaCIsImhhc2giLCJoYXMiLCJvdXRwdXQiLCJleHBlY3RlZCIsImdldCIsImdldEtleXN0b3JlSGFzaCIsImhhc01hdGNoIiwiaW5mbyIsImlzU2lnbmVkIiwic2V0IiwiZXJyTXNnIiwia2V5dG9vbCIsInJlc3VsdCIsImhhc2hOYW1lIiwiaGFzaFJlIiwibWF0Y2giLCJleGVjIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiaXNFbXB0eSIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0EsTUFBTUEsbUJBQW1CLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsZ0JBQWIsRUFBc0IsTUFBdEIsRUFBOEIsYUFBOUIsQ0FBNUI7O0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUdILGNBQUtDLE9BQUwsQ0FBYUMsZ0JBQWIsRUFBc0IsTUFBdEIsRUFBOEIsa0JBQTlCLENBQTVCOztBQUNBLE1BQU1FLG1CQUFtQixHQUFHLDhEQUE1QjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLGlCQUE5QjtBQUNBLE1BQU1DLElBQUksR0FBRyxNQUFiO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLFFBQWY7QUFDQSxNQUFNQyxNQUFNLEdBQUcsUUFBZjtBQUNBLE1BQU1DLEdBQUcsR0FBRyxLQUFaO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUc7QUFDeEIsR0FBQ0gsTUFBRCxHQUFVO0FBRGMsQ0FBMUI7QUFHQSxNQUFNSSxxQkFBcUIsR0FBRyxrQ0FBOUI7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxJ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Z0JBQU9DLFNBQVA7QUFBNUIsS0FBcEIsQ0FBdkI7QUFDQSxVQUFNdUUsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsU0FBSyxNQUFNQyxRQUFYLElBQXVCLENBQUMvRixNQUFELEVBQVNELE1BQVQsRUFBaUJELElBQWpCLEVBQXVCRyxHQUF2QixDQUF2QixFQUFvRDtBQUNsRCxZQUFNK0YsTUFBTSxHQUFHLElBQUluQixNQUFKLENBQVksUUFBT2tCLFFBQVMsbUJBQTVCLEVBQWdELElBQWhELENBQWY7QUFDQSxZQUFNRSxLQUFLLEdBQUdELE1BQU0sQ0FBQ0UsSUFBUCxDQUFZbEYsTUFBWixDQUFkOztBQUNBLFVBQUksQ0FBQ2lGLEtBQUwsRUFBWTtBQUNWO0FBQ0Q7O0FBQ0RILE1BQUFBLE1BQU0sQ0FBQ0MsUUFBRCxDQUFOLEdBQW1CRSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNFLE9BQVQsQ0FBaUIsSUFBakIsRUFBdUIsRUFBdkIsRUFBMkJDLFdBQTNCLEVBQW5CO0FBQ0Q7O0FBQ0QsUUFBSTFFLGdCQUFFMkUsT0FBRixDQUFVUCxNQUFWLENBQUosRUFBdUI7QUFDckJsRixzQkFBSUMsS0FBSixDQUFVRyxNQUFWOztBQUNBLFlBQU0sSUFBSXFCLEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7O0FBQ0R6QixvQkFBSUMsS0FBSixDQUFXLGtCQUFpQnlGLElBQUksQ0FBQ0MsU0FBTCxDQUFlVCxNQUFmLENBQXVCLEVBQW5EOztBQUNBLFdBQU9BLE1BQVA7QUFDRCxHQWpCRCxDQWlCRSxPQUFPeEQsQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJRCxLQUFKLENBQVcsMkJBQTBCLEtBQUtJLFlBQWEsY0FBN0MsR0FDYixtQkFBa0JILENBQUMsQ0FBQ3JCLE1BQUYsSUFBWXFCLENBQUMsQ0FBQ0MsT0FBUSxFQURyQyxDQUFOO0FBRUQ7QUFDRixDQW5DRDs7ZUFxQ2VoQyxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgX2ZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgeyB0ZW1wRGlyLCBzeXN0ZW0sIG1rZGlycCwgZnMsIHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IHtcbiAgZ2V0SmF2YUZvck9zLCBnZXRBcGtzaWduZXJGb3JPcywgZ2V0SmF2YUhvbWUsXG4gIHJvb3REaXIsIEFQS1NfRVhURU5TSU9OLCB1bnNpZ25BcGssXG59IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5jb25zdCBERUZBVUxUX1BSSVZBVEVfS0VZID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdrZXlzJywgJ3Rlc3RrZXkucGs4Jyk7XG5jb25zdCBERUZBVUxUX0NFUlRJRklDQVRFID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdrZXlzJywgJ3Rlc3RrZXkueDUwOS5wZW0nKTtcbmNvbnN0IEJVTkRMRVRPT0xfVFVUT1JJQUwgPSAnaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2NvbW1hbmQtbGluZS9idW5kbGV0b29sJztcbmNvbnN0IEFQS1NJR05FUl9WRVJJRllfRkFJTCA9ICdET0VTIE5PVCBWRVJJRlknO1xuY29uc3QgU0hBMSA9ICdzaGExJztcbmNvbnN0IFNIQTI1NiA9ICdzaGEyNTYnO1xuY29uc3QgU0hBNTEyID0gJ3NoYTUxMic7XG5jb25zdCBNRDUgPSAnbWQ1JztcbmNvbnN0IERFRkFVTFRfQ0VSVF9IQVNIID0ge1xuICBbU0hBMjU2XTogJ2E0MGRhODBhNTlkMTcwY2FhOTUwY2YxNWMxOGM0NTRkNDdhMzliMjY5ODlkOGI2NDBlY2Q3NDViYTcxYmY1ZGMnXG59O1xuY29uc3QgSkFWQV9QUk9QU19JTklUX0VSUk9SID0gJ2phdmEubGFuZy5FcnJvcjogUHJvcGVydGllcyBpbml0JztcbmNvbnN0IFNJR05FRF9BUFBTX0NBQ0hFID0gbmV3IExSVSh7XG4gIG1heDogMzAsXG59KTtcblxuXG5jb25zdCBhcGtTaWduaW5nTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIEV4ZWN1dGUgYXBrc2lnbmVyIHV0aWxpdHkgd2l0aCBnaXZlbiBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHs/QXJyYXk8U3RyaW5nPn0gYXJncyAtIFRoZSBsaXN0IG9mIHRvb2wgYXJndW1lbnRzLlxuICogQHJldHVybiB7c3RyaW5nfSAtIENvbW1hbmQgc3Rkb3V0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYXBrc2lnbmVyIGJpbmFyeSBpcyBub3QgcHJlc2VudCBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW1cbiAqICAgICAgICAgICAgICAgICBvciB0aGUgcmV0dXJuIGNvZGUgaXMgbm90IGVxdWFsIHRvIHplcm8uXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLmV4ZWN1dGVBcGtzaWduZXIgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlQXBrc2lnbmVyIChhcmdzID0gW10pIHtcbiAgY29uc3QgYXBrU2lnbmVySmFyID0gYXdhaXQgZ2V0QXBrc2lnbmVyRm9yT3ModGhpcyk7XG4gIGNvbnN0IGZ1bGxDbWQgPSBbXG4gICAgYXdhaXQgZ2V0SmF2YUZvck9zKCksICctWG14MTAyNE0nLCAnLVhzczFtJyxcbiAgICAnLWphcicsIGFwa1NpZ25lckphcixcbiAgICAuLi5hcmdzXG4gIF07XG4gIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgYXBrc2lnbmVyOiAke3V0aWwucXVvdGUoZnVsbENtZCl9YCk7XG4gIC8vIEl0IGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IENXRCBleHBsaWNpdGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzE0NzI0I2lzc3VlY29tbWVudC03Mzc0NDY3MTVcbiAgY29uc3Qge3N0ZG91dCwgc3RkZXJyfSA9IGF3YWl0IGV4ZWMoZnVsbENtZFswXSwgZnVsbENtZC5zbGljZSgxKSwge1xuICAgIGN3ZDogcGF0aC5kaXJuYW1lKGFwa1NpZ25lckphciksIHdpbmRvd3NWZXJiYXRpbUFyZ3VtZW50czogc3lzdGVtLmlzV2luZG93cygpXG4gIH0pO1xuICBmb3IgKGxldCBbbmFtZSwgc3RyZWFtXSBvZiBbWydzdGRvdXQnLCBzdGRvdXRdLCBbJ3N0ZGVycicsIHN0ZGVycl1dKSB7XG4gICAgaWYgKCFfLnRyaW0oc3RyZWFtKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdzdGRvdXQnKSB7XG4gICAgICAvLyBNYWtlIHRoZSBvdXRwdXQgbGVzcyB0YWxrYXRpdmVcbiAgICAgIHN0cmVhbSA9IHN0cmVhbS5zcGxpdCgnXFxuJylcbiAgICAgICAgLmZpbHRlcigobGluZSkgPT4gIWxpbmUuaW5jbHVkZXMoJ1dBUk5JTkc6JykpXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBhcGtzaWduZXIgJHtuYW1lfTogJHtzdHJlYW19YCk7XG4gIH1cbiAgcmV0dXJuIHN0ZG91dDtcbn07XG5cbi8qKlxuICogKFJlKXNpZ24gdGhlIGdpdmVuIGFwayBmaWxlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSB3aXRoIHRoZSBkZWZhdWx0IGNlcnRpZmljYXRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGsgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBsb2NhbCBhcGsgZmlsZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzaWduaW5nIGZhaWxzLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy5zaWduV2l0aERlZmF1bHRDZXJ0ID0gYXN5bmMgZnVuY3Rpb24gc2lnbldpdGhEZWZhdWx0Q2VydCAoYXBrKSB7XG4gIGxvZy5kZWJ1ZyhgU2lnbmluZyAnJHthcGt9JyB3aXRoIGRlZmF1bHQgY2VydGApO1xuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YXBrfSBmaWxlIGRvZXNuJ3QgZXhpc3QuYCk7XG4gIH1cblxuICBjb25zdCBhcmdzID0gW1xuICAgICdzaWduJyxcbiAgICAnLS1rZXknLCBERUZBVUxUX1BSSVZBVEVfS0VZLFxuICAgICctLWNlcnQnLCBERUZBVUxUX0NFUlRJRklDQVRFLFxuICAgIGFwayxcbiAgXTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBcGtzaWduZXIoYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBzaWduICcke2Fwa30nIHdpdGggdGhlIGRlZmF1bHQgY2VydGlmaWNhdGUuIGAgK1xuICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUuc3Rkb3V0IHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoUmUpc2lnbiB0aGUgZ2l2ZW4gYXBrIGZpbGUgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtIHdpdGggYSBjdXN0b20gY2VydGlmaWNhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwayAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIGFwayBmaWxlLlxuICogQHRocm93cyB7RXJyb3J9IElmIHNpZ25pbmcgZmFpbHMuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ25XaXRoQ3VzdG9tQ2VydCA9IGFzeW5jIGZ1bmN0aW9uIHNpZ25XaXRoQ3VzdG9tQ2VydCAoYXBrKSB7XG4gIGxvZy5kZWJ1ZyhgU2lnbmluZyAnJHthcGt9JyB3aXRoIGN1c3RvbSBjZXJ0YCk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyh0aGlzLmtleXN0b3JlUGF0aCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBLZXlzdG9yZTogJHt0aGlzLmtleXN0b3JlUGF0aH0gZG9lc24ndCBleGlzdC5gKTtcbiAgfVxuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCcke2Fwa30nIGRvZXNuJ3QgZXhpc3QuYCk7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZUFwa3NpZ25lcihbJ3NpZ24nLFxuICAgICAgJy0ta3MnLCB0aGlzLmtleXN0b3JlUGF0aCxcbiAgICAgICctLWtzLWtleS1hbGlhcycsIHRoaXMua2V5QWxpYXMsXG4gICAgICAnLS1rcy1wYXNzJywgYHBhc3M6JHt0aGlzLmtleXN0b3JlUGFzc3dvcmR9YCxcbiAgICAgICctLWtleS1wYXNzJywgYHBhc3M6JHt0aGlzLmtleVBhc3N3b3JkfWAsXG4gICAgICBhcGtdKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCB1c2UgYXBrc2lnbmVyIHRvb2wgZm9yIHNpZ25pbmcuIERlZmF1bHRpbmcgdG8gamFyc2lnbmVyLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIuc3RkZXJyIHx8IGVyci5zdGRvdXQgfHwgZXJyLm1lc3NhZ2V9YCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChhd2FpdCB1bnNpZ25BcGsoYXBrKSkge1xuICAgICAgICBsb2cuZGVidWcoYCcke2Fwa30nIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB1bnNpZ25lZGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmRlYnVnKGAnJHthcGt9JyBkb2VzIG5vdCBuZWVkIHRvIGJlIHVuc2lnbmVkYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBqYXJzaWduZXIgPSBwYXRoLnJlc29sdmUoYXdhaXQgZ2V0SmF2YUhvbWUoKSwgJ2JpbicsXG4gICAgICAgIGBqYXJzaWduZXIke3N5c3RlbS5pc1dpbmRvd3MoKSA/ICcuZXhlJyA6ICcnfWApO1xuICAgICAgY29uc3QgZnVsbENtZCA9IFtqYXJzaWduZXIsXG4gICAgICAgICctc2lnYWxnJywgJ01ENXdpdGhSU0EnLFxuICAgICAgICAnLWRpZ2VzdGFsZycsICdTSEExJyxcbiAgICAgICAgJy1rZXlzdG9yZScsIHRoaXMua2V5c3RvcmVQYXRoLFxuICAgICAgICAnLXN0b3JlcGFzcycsIHRoaXMua2V5c3RvcmVQYXNzd29yZCxcbiAgICAgICAgJy1rZXlwYXNzJywgdGhpcy5rZXlQYXNzd29yZCxcbiAgICAgICAgYXBrLCB0aGlzLmtleUFsaWFzXTtcbiAgICAgIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgamFyc2lnbmVyOiAke3V0aWwucXVvdGUoZnVsbENtZCl9YCk7XG4gICAgICBhd2FpdCBleGVjKGZ1bGxDbWRbMF0sIGZ1bGxDbWQuc2xpY2UoMSksIHsgd2luZG93c1ZlcmJhdGltQXJndW1lbnRzOiBzeXN0ZW0uaXNXaW5kb3dzKCkgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3Qgc2lnbiB3aXRoIGN1c3RvbSBjZXJ0aWZpY2F0ZS4gYCArXG4gICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIChSZSlzaWduIHRoZSBnaXZlbiBhcGsgZmlsZSBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0gd2l0aCBlaXRoZXJcbiAqIGN1c3RvbSBvciBkZWZhdWx0IGNlcnRpZmljYXRlIGJhc2VkIG9uIF90aGlzLnVzZUtleXN0b3JlXyBwcm9wZXJ0eSB2YWx1ZVxuICogYW5kIFppcC1hbGlnbnMgaXQgYWZ0ZXIgc2lnbmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIC5hcGsocykgZmlsZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzaWduaW5nIGZhaWxzLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy5zaWduID0gYXN5bmMgZnVuY3Rpb24gc2lnbiAoYXBwUGF0aCkge1xuICBpZiAoYXBwUGF0aC5lbmRzV2l0aChBUEtTX0VYVEVOU0lPTikpIHtcbiAgICBsZXQgbWVzc2FnZSA9ICdTaWduaW5nIG9mIC5hcGtzLWZpbGVzIGlzIG5vdCBzdXBwb3J0ZWQuICc7XG4gICAgaWYgKHRoaXMudXNlS2V5c3RvcmUpIHtcbiAgICAgIG1lc3NhZ2UgKz0gJ0NvbnNpZGVyIG1hbnVhbCBhcHBsaWNhdGlvbiBidW5kbGUgc2lnbmluZyB3aXRoIHRoZSBjdXN0b20ga2V5c3RvcmUgJyArXG4gICAgICAgIGBsaWtlIGl0IGlzIGRlc2NyaWJlZCBhdCAke0JVTkRMRVRPT0xfVFVUT1JJQUx9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSArPSBgQ29uc2lkZXIgbWFudWFsIGFwcGxpY2F0aW9uIGJ1bmRsZSBzaWduaW5nIHdpdGggdGhlIGtleSBhdCAnJHtERUZBVUxUX1BSSVZBVEVfS0VZfScgYCArXG4gICAgICAgIGBhbmQgdGhlIGNlcnRpZmljYXRlIGF0ICcke0RFRkFVTFRfQ0VSVElGSUNBVEV9Jy4gUmVhZCAke0JVTkRMRVRPT0xfVFVUT1JJQUx9IGZvciBtb3JlIGRldGFpbHMuYDtcbiAgICB9XG4gICAgbG9nLndhcm4obWVzc2FnZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaXQgaXMgbmVjZXNzYXJ5IHRvIGFwcGx5IHppcGFsaWduIG9ubHkgYmVmb3JlIHNpZ25pbmdcbiAgLy8gaWYgYXBrc2lnbmVyIGlzIHVzZWRcbiAgYXdhaXQgdGhpcy56aXBBbGlnbkFwayhhcHBQYXRoKTtcblxuICBpZiAodGhpcy51c2VLZXlzdG9yZSkge1xuICAgIGF3YWl0IHRoaXMuc2lnbldpdGhDdXN0b21DZXJ0KGFwcFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHRoaXMuc2lnbldpdGhEZWZhdWx0Q2VydChhcHBQYXRoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQZXJmb3JtIHppcC1hbGlnbmluZyB0byB0aGUgZ2l2ZW4gbG9jYWwgYXBrIGZpbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwayAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIGFwayBmaWxlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFwayBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgYWxpZ25lZFxuICogb3IgZmFsc2UgaWYgdGhlIGFwayBoYXMgYmVlbiBhbHJlYWR5IGFsaWduZWQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgemlwLWFsaWduIGZhaWxzLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy56aXBBbGlnbkFwayA9IGFzeW5jIGZ1bmN0aW9uIHppcEFsaWduQXBrIChhcGspIHtcbiAgYXdhaXQgdGhpcy5pbml0WmlwQWxpZ24oKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKHRoaXMuYmluYXJpZXMuemlwYWxpZ24sIFsnLWMnLCAnNCcsIGFwa10pO1xuICAgIGxvZy5kZWJ1ZyhgJHthcGt9JyBpcyBhbHJlYWR5IHppcC1hbGlnbmVkLiBEb2luZyBub3RoaW5nYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmRlYnVnKGAnJHthcGt9JyBpcyBub3QgemlwLWFsaWduZWQuIEFsaWduaW5nYCk7XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5hY2Nlc3MoYXBrLCBfZnMuV19PSyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmaWxlIGF0ICcke2Fwa30nIGlzIG5vdCB3cml0ZWFibGUuIGAgK1xuICAgICAgYFBsZWFzZSBncmFudCB3cml0ZSBwZXJtaXNzaW9ucyB0byB0aGlzIGZpbGUgb3IgdG8gaXRzIHBhcmVudCBmb2xkZXIgJyR7cGF0aC5kaXJuYW1lKGFwayl9JyBgICtcbiAgICAgIGBmb3IgdGhlIEFwcGl1bSBwcm9jZXNzLCBzbyBpdCBjYW4gemlwLWFsaWduIHRoZSBmaWxlYCk7XG4gIH1cbiAgY29uc3QgYWxpZ25lZEFwayA9IGF3YWl0IHRlbXBEaXIucGF0aCh7cHJlZml4OiAnYXBwaXVtJywgc3VmZml4OiAnLnRtcCd9KTtcbiAgYXdhaXQgbWtkaXJwKHBhdGguZGlybmFtZShhbGlnbmVkQXBrKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYyh0aGlzLmJpbmFyaWVzLnppcGFsaWduLCBbJy1mJywgJzQnLCBhcGssIGFsaWduZWRBcGtdKTtcbiAgICBhd2FpdCBmcy5tdihhbGlnbmVkQXBrLCBhcGssIHsgbWtkaXJwOiB0cnVlIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhhbGlnbmVkQXBrKSkge1xuICAgICAgYXdhaXQgZnMudW5saW5rKGFsaWduZWRBcGspO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYHppcEFsaWduQXBrIGZhaWxlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENlcnRDaGVja09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVxdWlyZURlZmF1bHRDZXJ0IFt0cnVlXSBXaGV0aGVyIHRvIHJlcXVpcmUgdGhhdCB0aGUgZGVzdGluYXRpb24gQVBLXG4gKiBpcyBzaWduZWQgd2l0aCB0aGUgZGVmYXVsdCBBcHBpdW0gY2VydGlmaWNhdGUgb3IgYW55IHZhbGlkIGNlcnRpZmljYXRlLiBUaGlzIG9wdGlvblxuICogb25seSBoYXMgZWZmZWN0IGlmIGB1c2VLZXlzdG9yZWAgcHJvcGVydHkgaXMgdW5zZXQuXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYXBwIGlzIGFscmVhZHkgc2lnbmVkIHdpdGggdGhlIGRlZmF1bHQgQXBwaXVtIGNlcnRpZmljYXRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBQYXRoIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgbG9jYWwgLmFwayhzKSBmaWxlLlxuICogQHBhcmFtIHtzdHJpbmd9IHBnayAtIFRoZSBuYW1lIG9mIGFwcGxpY2F0aW9uIHBhY2thZ2UuXG4gKiBAcGFyYW0ge0NlcnRDaGVja09wdGlvbnN9IG9wdHMgLSBDZXJ0aWZpY2F0ZSBjaGVja2luZyBvcHRpb25zXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGFscmVhZHkgc2lnbmVkLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy5jaGVja0Fwa0NlcnQgPSBhc3luYyBmdW5jdGlvbiBjaGVja0Fwa0NlcnQgKGFwcFBhdGgsIHBrZywgb3B0cyA9IHt9KSB7XG4gIGxvZy5kZWJ1ZyhgQ2hlY2tpbmcgYXBwIGNlcnQgZm9yICR7YXBwUGF0aH1gKTtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHMoYXBwUGF0aCkpIHtcbiAgICBsb2cuZGVidWcoYCcke2FwcFBhdGh9JyBkb2VzIG5vdCBleGlzdGApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXRoLmV4dG5hbWUoYXBwUGF0aCkgPT09IEFQS1NfRVhURU5TSU9OKSB7XG4gICAgYXBwUGF0aCA9IGF3YWl0IHRoaXMuZXh0cmFjdEJhc2VBcGsoYXBwUGF0aCk7XG4gIH1cblxuICBjb25zdCBoYXNoTWF0Y2hlcyA9IChhcGtzaWduZXJPdXRwdXQsIGV4cGVjdGVkSGFzaGVzKSA9PiB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIF8udG9QYWlycyhleHBlY3RlZEhhc2hlcykpIHtcbiAgICAgIGlmIChuZXcgUmVnRXhwKGBkaWdlc3Q6XFxcXHMrJHt2YWx1ZX1cXFxcYmAsICdpJykudGVzdChhcGtzaWduZXJPdXRwdXQpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgJHtuYW1lfSBoYXNoIGRpZCBtYXRjaCBmb3IgJyR7cGF0aC5iYXNlbmFtZShhcHBQYXRoKX0nYCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgY29uc3Qge1xuICAgIHJlcXVpcmVEZWZhdWx0Q2VydCA9IHRydWUsXG4gIH0gPSBvcHRzO1xuXG4gIGNvbnN0IGFwcEhhc2ggPSBhd2FpdCBmcy5oYXNoKGFwcFBhdGgpO1xuICBpZiAoU0lHTkVEX0FQUFNfQ0FDSEUuaGFzKGFwcEhhc2gpKSB7XG4gICAgbG9nLmRlYnVnKGBVc2luZyB0aGUgcHJldmlvdXNseSBjYWNoZWQgc2lnbmF0dXJlIGVudHJ5IGZvciAnJHtwYXRoLmJhc2VuYW1lKGFwcFBhdGgpfSdgKTtcbiAgICBjb25zdCB7a2V5c3RvcmVQYXRoLCBvdXRwdXQsIGV4cGVjdGVkfSA9IFNJR05FRF9BUFBTX0NBQ0hFLmdldChhcHBIYXNoKTtcbiAgICBpZiAodGhpcy51c2VLZXlzdG9yZSAmJiB0aGlzLmtleXN0b3JlUGF0aCA9PT0ga2V5c3RvcmVQYXRoIHx8ICF0aGlzLnVzZUtleXN0b3JlKSB7XG4gICAgICByZXR1cm4gKCF0aGlzLnVzZUtleXN0b3JlICYmICFyZXF1aXJlRGVmYXVsdENlcnQpIHx8IGhhc2hNYXRjaGVzKG91dHB1dCwgZXhwZWN0ZWQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGV4cGVjdGVkID0gdGhpcy51c2VLZXlzdG9yZVxuICAgID8gYXdhaXQgdGhpcy5nZXRLZXlzdG9yZUhhc2goYXBwUGF0aCwgcGtnKVxuICAgIDogREVGQVVMVF9DRVJUX0hBU0g7XG4gIHRyeSB7XG4gICAgYXdhaXQgZ2V0QXBrc2lnbmVyRm9yT3ModGhpcyk7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjdXRlQXBrc2lnbmVyKFsndmVyaWZ5JywgJy0tcHJpbnQtY2VydHMnLCBhcHBQYXRoXSk7XG4gICAgY29uc3QgaGFzTWF0Y2ggPSBoYXNoTWF0Y2hlcyhvdXRwdXQsIGV4cGVjdGVkKTtcbiAgICBpZiAoaGFzTWF0Y2gpIHtcbiAgICAgIGxvZy5pbmZvKGAnJHthcHBQYXRofScgaXMgc2lnbmVkIHdpdGggdGhlIGAgK1xuICAgICAgICBgJHt0aGlzLnVzZUtleXN0b3JlID8gJ2tleXN0b3JlJyA6ICdkZWZhdWx0J30gY2VydGlmaWNhdGVgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oYCcke2FwcFBhdGh9JyBpcyBzaWduZWQgd2l0aCBhIGAgK1xuICAgICAgICBgbm9uLSR7dGhpcy51c2VLZXlzdG9yZSA/ICdrZXlzdG9yZScgOiAnZGVmYXVsdCd9IGNlcnRpZmljYXRlYCk7XG4gICAgfVxuICAgIGNvbnN0IGlzU2lnbmVkID0gKCF0aGlzLnVzZUtleXN0b3JlICYmICFyZXF1aXJlRGVmYXVsdENlcnQpIHx8IGhhc01hdGNoO1xuICAgIGlmIChpc1NpZ25lZCkge1xuICAgICAgU0lHTkVEX0FQUFNfQ0FDSEUuc2V0KGFwcEhhc2gsIHtcbiAgICAgICAgb3V0cHV0LFxuICAgICAgICBleHBlY3RlZCxcbiAgICAgICAga2V5c3RvcmVQYXRoOiB0aGlzLmtleXN0b3JlUGF0aCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaXNTaWduZWQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIG5vIHNpZ25hdHVyZVxuICAgIGlmIChfLmluY2x1ZGVzKGVyci5zdGRlcnIsIEFQS1NJR05FUl9WRVJJRllfRkFJTCkpIHtcbiAgICAgIGxvZy5pbmZvKGAnJHthcHBQYXRofScgaXMgbm90IHNpZ25lZGApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBlcnJNc2cgPSBlcnIuc3RkZXJyIHx8IGVyci5zdGRvdXQgfHwgZXJyLm1lc3NhZ2U7XG4gICAgaWYgKF8uaW5jbHVkZXMoZXJyTXNnLCBKQVZBX1BST1BTX0lOSVRfRVJST1IpKSB7XG4gICAgICAvLyBUaGlzIGVycm9yIHBvcHMgdXAgcmFuZG9tbHkgYW5kIHdlIGFyZSBub3QgcXVpdGUgc3VyZSB3aHkuXG4gICAgICAvLyBNeSBndWVzcyAtIGEgcmFjZSBjb25kaXRpb24gaW4gamF2YSB2bSBpbml0aWFsaXphdGlvbi5cbiAgICAgIC8vIE5ldmVydGhlbGVzcywgbGV0cyBtYWtlIEFwcGl1bSB0byBiZWxpZXZlIHRoZSBmaWxlIGlzIGFscmVhZHkgc2lnbmVkLFxuICAgICAgLy8gYmVjYXVzZSBpdCB3b3VsZCBiZSB0cnVlIGZvciA5OSUgb2YgVUlBdXRvbWF0b3IyLWJhc2VkXG4gICAgICAvLyB0ZXN0cywgd2hlcmUgd2UgcHJlc2lnbiBzZXJ2ZXIgYmluYXJpZXMgd2hpbGUgcHVibGlzaGluZyB0aGVpciBOUE0gbW9kdWxlLlxuICAgICAgLy8gSWYgdGhlc2UgYXJlIG5vdCBzaWduZWQsIGUuZy4gaW4gY2FzZSBvZiBFc3ByZXNzbywgdGhlbiB0aGUgbmV4dCBzdGVwKHMpXG4gICAgICAvLyB3b3VsZCBhbnl3YXkgZmFpbC5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTQ3MjQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGxvZy53YXJuKGVyck1zZyk7XG4gICAgICBsb2cud2FybihgQXNzdW1pbmcgJyR7YXBwUGF0aH0nIGlzIGFscmVhZHkgc2lnbmVkIGFuZCBjb250aW51aW5nIGFueXdheWApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHZlcmlmeSB0aGUgc2lnbmF0dXJlIG9mICcke2FwcFBhdGh9Jy4gYCArXG4gICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyTXNnfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEtleXN0b3JlSGFzaFxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZDUgdGhlIG1kNSBoYXNoIHZhbHVlIG9mIHRoZSBrZXlzdG9yZVxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBzaGExIHRoZSBzaGExIGhhc2ggdmFsdWUgb2YgdGhlIGtleXN0b3JlXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHNoYTI1NiB0aGUgc2hhMjU2IGhhc2ggdmFsdWUgb2YgdGhlIGtleXN0b3JlXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHNoYTUxMiB0aGUgc2hhNTEyIGhhc2ggdmFsdWUgb2YgdGhlIGtleXN0b3JlXG4gKi9cblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgdGhlIGhhc2ggb2YgdGhlIGdpdmVuIGtleXN0b3JlLlxuICpcbiAqIEByZXR1cm4ge0tleXN0b3JlSGFzaH1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBnZXR0aW5nIGtleXN0b3JlIGhhc2ggZmFpbHMuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLmdldEtleXN0b3JlSGFzaCA9IGFzeW5jIGZ1bmN0aW9uIGdldEtleXN0b3JlSGFzaCAoKSB7XG4gIGxvZy5kZWJ1ZyhgR2V0dGluZyBoYXNoIG9mIHRoZSAnJHt0aGlzLmtleXN0b3JlUGF0aH0nIGtleXN0b3JlYCk7XG4gIGNvbnN0IGtleXRvb2wgPSBwYXRoLnJlc29sdmUoYXdhaXQgZ2V0SmF2YUhvbWUoKSwgJ2JpbicsXG4gICAgYGtleXRvb2wke3N5c3RlbS5pc1dpbmRvd3MoKSA/ICcuZXhlJyA6ICcnfWApO1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhrZXl0b29sKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGtleXRvb2wgdXRpbGl0eSBjYW5ub3QgYmUgZm91bmQgYXQgJyR7a2V5dG9vbH0nYCk7XG4gIH1cbiAgY29uc3QgYXJncyA9IFtcbiAgICAnLXYnLCAnLWxpc3QnLFxuICAgICctYWxpYXMnLCB0aGlzLmtleUFsaWFzLFxuICAgICcta2V5c3RvcmUnLCB0aGlzLmtleXN0b3JlUGF0aCxcbiAgICAnLXN0b3JlcGFzcycsIHRoaXMua2V5c3RvcmVQYXNzd29yZFxuICBdO1xuICBsb2cuaW5mbyhgUnVubmluZyAnJHtrZXl0b29sfScgd2l0aCBhcmd1bWVudHM6ICR7dXRpbC5xdW90ZShhcmdzKX1gKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoa2V5dG9vbCwgYXJncywgeyB3aW5kb3dzVmVyYmF0aW1Bcmd1bWVudHM6IHN5c3RlbS5pc1dpbmRvd3MoKSB9KTtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGhhc2hOYW1lIG9mIFtTSEE1MTIsIFNIQTI1NiwgU0hBMSwgTUQ1XSkge1xuICAgICAgY29uc3QgaGFzaFJlID0gbmV3IFJlZ0V4cChgXlxcXFxzKiR7aGFzaE5hbWV9OlxcXFxzKihbYS1mMC05Ol0rKWAsICdtaScpO1xuICAgICAgY29uc3QgbWF0Y2ggPSBoYXNoUmUuZXhlYyhzdGRvdXQpO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdFtoYXNoTmFtZV0gPSBtYXRjaFsxXS5yZXBsYWNlKC86L2csICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAoXy5pc0VtcHR5KHJlc3VsdCkpIHtcbiAgICAgIGxvZy5kZWJ1ZyhzdGRvdXQpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcGFyc2UgdGhlIGhhc2ggdmFsdWUgZnJvbSB0aGUga2V5dG9vbCBvdXRwdXQnKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBLZXlzdG9yZSBoYXNoOiAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGdldCB0aGUgaGFzaCBvZiAnJHt0aGlzLmtleXN0b3JlUGF0aH0nIGtleXN0b3JlLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwa1NpZ25pbmdNZXRob2RzO1xuIl0sImZpbGUiOiJsaWIvdG9vbHMvYXBrLXNpZ25pbmcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
