"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers");

var _lodash = _interopRequireDefault(require("lodash"));

var _net = _interopRequireDefault(require("net"));

var _support = require("@appium/support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _ini = _interopRequireDefault(require("ini"));

const PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\s.]?[0-9]*[-\s.]?[0-9]{2,}$/im;
const emuMethods = {};
emuMethods.POWER_AC_STATES = Object.freeze({
  POWER_AC_ON: 'on',
  POWER_AC_OFF: 'off'
});
emuMethods.GSM_CALL_ACTIONS = Object.freeze({
  GSM_CALL: 'call',
  GSM_ACCEPT: 'accept',
  GSM_CANCEL: 'cancel',
  GSM_HOLD: 'hold'
});
emuMethods.GSM_VOICE_STATES = Object.freeze({
  GSM_VOICE_UNREGISTERED: 'unregistered',
  GSM_VOICE_HOME: 'home',
  GSM_VOICE_ROAMING: 'roaming',
  GSM_VOICE_SEARCHING: 'searching',
  GSM_VOICE_DENIED: 'denied',
  GSM_VOICE_OFF: 'off',
  GSM_VOICE_ON: 'on'
});
emuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];
emuMethods.NETWORK_SPEED = Object.freeze({
  GSM: 'gsm',
  SCSD: 'scsd',
  GPRS: 'gprs',
  EDGE: 'edge',
  UMTS: 'umts',
  HSDPA: 'hsdpa',
  LTE: 'lte',
  EVDO: 'evdo',
  FULL: 'full'
});
emuMethods.SENSORS = Object.freeze({
  ACCELERATION: 'acceleration',
  GYROSCOPE: 'gyroscope',
  MAGNETIC_FIELD: 'magnetic-field',
  ORIENTATION: 'orientation',
  TEMPERATURE: 'temperature',
  PROXIMITY: 'proximity',
  LIGHT: 'light',
  PRESSURE: 'pressure',
  HUMIDITY: 'humidity',
  MAGNETIC_FIELD_UNCALIBRATED: 'magnetic-field-uncalibrated',
  GYROSCOPE_UNCALIBRATED: 'gyroscope-uncalibrated',
  HINGE_ANGLE0: 'hinge-angle0',
  HINGE_ANGLE1: 'hinge-angle1',
  HINGE_ANGLE2: 'hinge-angle2',
  HEART_RATE: 'heart-rate',
  RGBC_LIGHT: 'rgbc-light'
});

async function listEmulators() {
  let avdsRoot = process.env.ANDROID_AVD_HOME;

  if (await (0, _helpers.dirExists)(avdsRoot)) {
    return await getAvdConfigPaths(avdsRoot);
  }

  if (avdsRoot) {
    _logger.default.warn(`The value of the ANDROID_AVD_HOME environment variable '${avdsRoot}' is not an existing directory`);
  }

  const prefsRoot = await (0, _helpers.getAndroidPrefsRoot)();

  if (!prefsRoot) {
    return [];
  }

  avdsRoot = _path.default.resolve(prefsRoot, 'avd');

  if (!(await (0, _helpers.dirExists)(avdsRoot))) {
    _logger.default.debug(`Virtual devices config root '${avdsRoot}' is not an existing directory`);

    return [];
  }

  return await getAvdConfigPaths(avdsRoot);
}

async function getAvdConfigPaths(avdsRoot) {
  const configs = await _support.fs.glob('*.ini', {
    cwd: avdsRoot,
    absolute: true
  });
  return configs.map(confPath => {
    const avdName = _path.default.basename(confPath).split('.').slice(0, -1).join('.');

    return {
      name: avdName,
      config: confPath
    };
  }).filter(({
    name
  }) => _lodash.default.trim(name));
}

emuMethods.isEmulatorConnected = async function isEmulatorConnected() {
  let emulators = await this.getConnectedEmulators();
  return !!_lodash.default.find(emulators, x => x && x.udid === this.curDeviceId);
};

emuMethods.verifyEmulatorConnected = async function verifyEmulatorConnected() {
  if (!(await this.isEmulatorConnected())) {
    throw new Error(`The emulator "${this.curDeviceId}" was unexpectedly disconnected`);
  }
};

emuMethods.fingerprint = async function fingerprint(fingerprintId) {
  if (!fingerprintId) {
    throw new Error('Fingerprint id parameter must be defined');
  }

  let level = await this.getApiLevel();

  if (level < 23) {
    throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);
  }

  await this.adbExecEmu(['finger', 'touch', fingerprintId]);
};

emuMethods.rotate = async function rotate() {
  await this.adbExecEmu(['rotate']);
};

emuMethods.powerAC = async function powerAC(state = 'on') {
  if (_lodash.default.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {
    throw new TypeError(`Wrong power AC state sent '${state}'. ` + `Supported values: ${_lodash.default.values(emuMethods.POWER_AC_STATES)}]`);
  }

  await this.adbExecEmu(['power', 'ac', state]);
};

emuMethods.sensorSet = async function sensorSet(sensor, value) {
  if (!_lodash.default.includes(emuMethods.SENSORS, sensor)) {
    throw new TypeError(`Unsupported sensor sent '${sensor}'. ` + `Supported values: ${_lodash.default.values(emuMethods.SENSORS)}]`);
  }

  if (_lodash.default.isNil(value) || value === '') {
    throw new TypeError(`Missing/invalid sensor value argument. ` + `You need to provide a valid value to set to the sensor in ` + `format <value-a>[:<value-b>[:<value-c>[...]]].`);
  }

  await this.adbExecEmu(['sensor', 'set', sensor, value]);
};

emuMethods.powerCapacity = async function powerCapacity(percent = 100) {
  percent = parseInt(percent, 10);

  if (isNaN(percent) || percent < 0 || percent > 100) {
    throw new Error(`The percentage value should be valid integer between 0 and 100`);
  }

  await this.adbExecEmu(['power', 'capacity', percent]);
};

emuMethods.powerOFF = async function powerOFF() {
  await this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);
  await this.powerCapacity(0);
};

emuMethods.sendSMS = async function sendSMS(phoneNumber, message = '') {
  message = message.trim();

  if (message === '') {
    throw new Error('Sending an SMS requires a message');
  }

  phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
    throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);
  }

  await this.adbExecEmu(['sms', 'send', phoneNumber, message]);
};

emuMethods.gsmCall = async function gsmCall(phoneNumber, action = '') {
  if (_lodash.default.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {
    throw new Error(`Invalid gsm action param ${action}. Supported values: ${_lodash.default.values(emuMethods.GSM_CALL_ACTIONS)}`);
  }

  phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
    throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);
  }

  await this.adbExecEmu(['gsm', action, phoneNumber]);
};

emuMethods.gsmSignal = async function gsmSignal(strength = 4) {
  strength = parseInt(strength, 10);

  if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {
    throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_lodash.default.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);
  }

  _logger.default.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');

  await this.adbExecEmu(['gsm', 'signal-profile', strength]);
};

emuMethods.gsmVoice = async function gsmVoice(state = 'on') {
  if (_lodash.default.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {
    throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_lodash.default.values(emuMethods.GSM_VOICE_STATES)}`);
  }

  await this.adbExecEmu(['gsm', 'voice', state]);
};

emuMethods.networkSpeed = async function networkSpeed(speed = 'full') {
  if (_lodash.default.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {
    throw new Error(`Invalid network speed param ${speed}. Supported values: ${_lodash.default.values(emuMethods.NETWORK_SPEED)}`);
  }

  await this.adbExecEmu(['network', 'speed', speed]);
};

emuMethods.execEmuConsoleCommand = async function execTelnet(cmd, opts = {}) {
  let port = parseInt(opts.port, 10);

  if (!port) {
    const portMatch = /emulator-(\d+)/i.exec(this.curDeviceId);

    if (!portMatch) {
      throw new Error(`Cannot parse the console port number from the device identifier '${this.curDeviceId}'. ` + `Is it an emulator?`);
    }

    port = parseInt(portMatch[1], 10);
  }

  const host = '127.0.0.1';
  const {
    execTimeout = 60000,
    connTimeout = 5000,
    initTimeout = 5000
  } = opts;
  await this.resetTelnetAuthToken();
  const okFlag = /^OK$/m;
  const nokFlag = /^KO\b/m;
  const eol = '\r\n';

  const client = _net.default.connect({
    host,
    port
  });

  return await new _bluebird.default((resolve, reject) => {
    const connTimeoutObj = setTimeout(() => reject(new Error(`Cannot connect to the Emulator console at ${host}:${port} ` + `after ${connTimeout}ms`)), connTimeout);
    let execTimeoutObj;
    let initTimeoutObj;
    let isCommandSent = false;
    let serverResponse = [];
    client.once('error', e => {
      clearTimeout(connTimeoutObj);
      reject(new Error(`Cannot connect to the Emulator console at ${host}:${port}. ` + `Original error: ${e.message}`));
    });
    client.once('connect', () => {
      clearTimeout(connTimeoutObj);
      initTimeoutObj = setTimeout(() => reject(new Error(`Did not get the initial response from the Emulator console at ${host}:${port} ` + `after ${initTimeout}ms`)), initTimeout);
    });
    client.on('data', chunk => {
      serverResponse.push(chunk);
      const output = Buffer.concat(serverResponse).toString('utf8').trim();

      if (okFlag.test(output)) {
        if (!isCommandSent) {
          clearTimeout(initTimeoutObj);
          serverResponse = [];
          const cmdStr = _lodash.default.isArray(cmd) ? _support.util.quote(cmd) : `${cmd}`;

          _logger.default.debug(`Executing Emulator console command: ${cmdStr}`);

          client.write(cmdStr);
          client.write(eol);
          isCommandSent = true;
          execTimeoutObj = setTimeout(() => reject(new Error(`Did not get any response from the Emulator console at ${host}:${port} ` + `to '${cmd}' command after ${execTimeout}ms`)), execTimeout);
          return;
        }

        clearTimeout(execTimeoutObj);
        client.end();
        const outputArr = output.split(eol);
        return resolve(outputArr.slice(0, outputArr.length - 1).join('\n').trim());
      } else if (nokFlag.test(output)) {
        clearTimeout(initTimeoutObj);
        clearTimeout(execTimeoutObj);
        client.end();
        const outputArr = output.split(eol);
        return reject(_lodash.default.trim(_lodash.default.last(outputArr)));
      }
    });
  });
};

emuMethods.getEmuVersionInfo = async function getEmuVersionInfo() {
  const propsPath = _path.default.join(this.sdkRoot, 'emulator', 'source.properties');

  if (!(await _support.fs.exists(propsPath))) {
    return {};
  }

  const content = await _support.fs.readFile(propsPath, 'utf8');
  const revisionMatch = /^Pkg\.Revision=([\d.]+)$/m.exec(content);
  const result = {};

  if (revisionMatch) {
    result.revision = revisionMatch[1];
  }

  const buildIdMatch = /^Pkg\.BuildId=(\d+)$/m.exec(content);

  if (buildIdMatch) {
    result.buildId = parseInt(buildIdMatch[1], 10);
  }

  return result;
};

emuMethods.getEmuImageProperties = async function getEmuImageProperties(avdName) {
  const avds = await listEmulators();
  const avd = avds.find(({
    name
  }) => name === avdName);

  if (!avd) {
    let msg = `Cannot find '${avdName}' emulator. `;

    if (_lodash.default.isEmpty(avds)) {
      msg += `No emulators have been detected on your system`;
    } else {
      msg += `Available avd names are: ${avds.map(({
        name
      }) => name)}`;
    }

    throw new Error(msg);
  }

  return _ini.default.parse(await _support.fs.readFile(avd.config, 'utf8'));
};

emuMethods.checkAvdExist = async function checkAvdExist(avdName) {
  const avds = await listEmulators();

  if (!avds.some(({
    name
  }) => name === avdName)) {
    let msg = `Avd '${avdName}' is not available. `;

    if (_lodash.default.isEmpty(avds)) {
      msg += `No emulators have been detected on your system`;
    } else {
      msg += `Please select your avd name from one of these: '${avds.map(({
        name
      }) => name)}'`;
    }

    throw new Error(msg);
  }

  return true;
};

var _default = emuMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
