"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SERVER_PROP_NAME = exports.ArgSpec = exports.APPIUM_CONFIG_SCHEMA_ID = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const APPIUM_CONFIG_SCHEMA_ID = 'appium.json';
exports.APPIUM_CONFIG_SCHEMA_ID = APPIUM_CONFIG_SCHEMA_ID;
const SERVER_PROP_NAME = 'server';
exports.SERVER_PROP_NAME = SERVER_PROP_NAME;
const SCHEMA_ID_REGEXP = /^(?<extType>.+?)-(?<normalizedExtName>.+)\.json$/;
const PROPERTIES = 'properties';

class ArgSpec {
  name;
  extType;
  extName;
  ref;
  arg;
  dest;
  rawDest;
  defaultValue;

  constructor(name, {
    extType,
    extName,
    dest,
    defaultValue
  } = {}) {
    const arg = ArgSpec.toArg(name, extType, extName);
    const ref = ArgSpec.toSchemaRef(name, extType, extName);

    const rawDest = _lodash.default.camelCase(dest !== null && dest !== void 0 ? dest : name);

    const destKeypath = extType && extName ? [extType, extName, rawDest].join('.') : rawDest;
    this.defaultValue = defaultValue;
    this.name = name;
    this.extType = extType;
    this.extName = extName;
    this.arg = arg;
    this.dest = destKeypath;
    this.ref = ref;
    this.rawDest = rawDest;
  }

  static toSchemaRef(name, extType, extName) {
    const baseRef = ArgSpec.toSchemaBaseRef(extType, extName);

    if (extType && extName) {
      return [`${baseRef}#`, PROPERTIES, name].join('/');
    }

    return [`${baseRef}#`, PROPERTIES, SERVER_PROP_NAME, PROPERTIES, name].join('/');
  }

  static toSchemaBaseRef(extType, extName) {
    if (extType && extName) {
      return `${extType}-${ArgSpec.toNormalizedExtName(extName)}.json`;
    }

    return APPIUM_CONFIG_SCHEMA_ID;
  }

  static toArg(name, extType, extName) {
    const properName = _lodash.default.kebabCase(name.replace(/^--?/, ''));

    if (extType && extName) {
      return [extType, _lodash.default.kebabCase(extName), properName].join('-');
    }

    return properName;
  }

  static toNormalizedExtName(extName) {
    return _lodash.default.kebabCase(extName);
  }

  static extensionInfoFromRootSchemaId(schemaId) {
    const matches = schemaId.match(SCHEMA_ID_REGEXP);

    if (matches !== null && matches !== void 0 && matches.groups) {
      const {
        extType,
        normalizedExtName
      } = matches.groups;
      return {
        extType,
        normalizedExtName
      };
    }

    return {};
  }

  static create(name, opts) {
    return Object.freeze(new ArgSpec(name, opts));
  }

  toString() {
    let str = `[ArgSpec] ${this.name} (${this.ref})`;

    if (this.extType && this.extName) {
      str += ` (ext: ${this.extType}/${this.extName})`;
    }

    return str;
  }

}

exports.ArgSpec = ArgSpec;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,