"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtensionArgs = void 0;
exports.getServerArgs = getServerArgs;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _extensionConfig = require("../extension/extension-config");

var _cliArgs = require("../schema/cli-args");

const DRIVER_EXAMPLE = 'xcuitest';
const PLUGIN_EXAMPLE = 'find_by_image';
const INSTALL_TYPES_ARRAY = [..._extensionConfig.INSTALL_TYPES];
const EXTENSION_TYPES = new Set([_constants.DRIVER_TYPE, _constants.PLUGIN_TYPE]);
const globalExtensionArgs = new Map([[['--json'], {
  required: false,
  default: false,
  action: 'store_true',
  help: 'Use JSON for output format',
  dest: 'json'
}]]);

const getExtensionArgs = _lodash.default.memoize(function getExtensionArgs() {
  const extensionArgs = {};

  for (const type of EXTENSION_TYPES) {
    extensionArgs[type] = {
      [_constants.EXT_SUBCOMMAND_LIST]: makeListArgs(type),
      [_constants.EXT_SUBCOMMAND_INSTALL]: makeInstallArgs(type),
      [_constants.EXT_SUBCOMMAND_UNINSTALL]: makeUninstallArgs(type),
      [_constants.EXT_SUBCOMMAND_UPDATE]: makeUpdateArgs(type),
      [_constants.EXT_SUBCOMMAND_RUN]: makeRunArgs(type)
    };
  }

  return extensionArgs;
});

exports.getExtensionArgs = getExtensionArgs;

function makeListArgs(type) {
  return new Map([...globalExtensionArgs, [['--installed'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `List only installed ${type}s`,
    dest: 'showInstalled'
  }], [['--updates'], {
    required: false,
    default: false,
    action: 'store_true',
    help: 'Show information about newer versions',
    dest: 'showUpdates'
  }]]);
}

function makeInstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to install, for example: ` + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--source'], {
    required: false,
    default: null,
    choices: INSTALL_TYPES_ARRAY,
    help: `Where to look for the ${type} if it is not one of Appium's verified ` + `${type}s. Possible values: ${INSTALL_TYPES_ARRAY.join(', ')}`,
    dest: 'installType'
  }], [['--package'], {
    required: false,
    default: null,
    type: 'str',
    help: `If installing from Git or GitHub, the package name, as defined in the plugin's ` + `package.json file in the "name" field, cannot be determined automatically, and ` + `should be reported here, otherwise the install will probably fail.`,
    dest: 'packageName'
  }]]);
}

function makeUninstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: 'Name of the driver to uninstall, for example: ' + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }]]);
}

function makeUpdateArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to update, or the word "installed" to update all installed ` + `${type}s. To see available updates, run "appium ${type} list --installed --updates". ` + 'For example: ' + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--unsafe'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `Include updates that might have a new major revision, and potentially include ` + `breaking changes`
  }]]);
}

function makeRunArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to run a script from, for example: ` + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['scriptName'], {
    default: null,
    type: 'str',
    help: `Name of the script to run from the ${type}. The script name must be cached ` + `inside the "scripts" field under "appium" inside the ${type}'s "package.json" file`
  }]]);
}

function getServerArgs() {
  return new Map([...(0, _cliArgs.toParserArgs)(), ...serverArgsDisallowedInConfig]);
}

const serverArgsDisallowedInConfig = new Map([[['--shell'], {
  required: false,
  help: 'Enter REPL mode',
  action: 'store_const',
  const: true,
  dest: 'shell'
}], [['--show-build-info'], {
  dest: 'showBuildInfo',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show info about the Appium build and exit'
}], [['--show-config'], {
  dest: 'showConfig',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show the current Appium configuration and exit'
}], [['--config'], {
  dest: 'configFile',
  type: 'string',
  required: false,
  help: 'Explicit path to Appium configuration file'
}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,