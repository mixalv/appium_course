"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runExtensionCommand = runExtensionCommand;

require("source-map-support/register");

var _driverCommand = _interopRequireDefault(require("./driver-command"));

var _pluginCommand = _interopRequireDefault(require("./plugin-command"));

var _constants = require("../constants");

var _utils = require("./utils");

const commandClasses = Object.freeze({
  [_constants.DRIVER_TYPE]: _driverCommand.default,
  [_constants.PLUGIN_TYPE]: _pluginCommand.default
});

async function runExtensionCommand(args, configObject) {
  let jsonResult = null;
  const {
    extensionType: type
  } = configObject;
  const extCmd = args[`${type}Command`];

  if (!extCmd) {
    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);
  }

  let {
    json,
    suppressOutput
  } = args;

  if (suppressOutput) {
    json = true;
  }

  const logFn = msg => (0, _utils.log)(json, msg);

  let config = configObject;
  config.log = logFn;
  const CommandClass = commandClasses[type];
  const cmd = new CommandClass({
    config,
    json
  });

  try {
    jsonResult = await cmd.execute(args);
  } catch (err) {
    if (suppressOutput) {
      throw err;
    }

    (0, _utils.errAndQuit)(json, err);
  }

  if (json && !suppressOutput) {
    console.log(JSON.stringify(jsonResult, null, _utils.JSON_SPACES));
  }

  return jsonResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGkvZXh0ZW5zaW9uLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRDbGFzc2VzIiwiT2JqZWN0IiwiZnJlZXplIiwiRFJJVkVSX1RZUEUiLCJEcml2ZXJDb21tYW5kIiwiUExVR0lOX1RZUEUiLCJQbHVnaW5Db21tYW5kIiwicnVuRXh0ZW5zaW9uQ29tbWFuZCIsImFyZ3MiLCJjb25maWdPYmplY3QiLCJqc29uUmVzdWx0IiwiZXh0ZW5zaW9uVHlwZSIsInR5cGUiLCJleHRDbWQiLCJUeXBlRXJyb3IiLCJqc29uIiwic3VwcHJlc3NPdXRwdXQiLCJsb2dGbiIsIm1zZyIsImNvbmZpZyIsImxvZyIsIkNvbW1hbmRDbGFzcyIsImNtZCIsImV4ZWN1dGUiLCJlcnIiLCJjb25zb2xlIiwiSlNPTiIsInN0cmluZ2lmeSIsIkpTT05fU1BBQ0VTIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQW1DO0FBQ3hELEdBQUNDLHNCQUFELEdBQWVDLHNCQUR5QztBQUV4RCxHQUFDQyxzQkFBRCxHQUFlQztBQUZ5QyxDQUFuQyxDQUF2Qjs7QUFjQSxlQUFlQyxtQkFBZixDQUFvQ0MsSUFBcEMsRUFBMENDLFlBQTFDLEVBQXdEO0FBR3RELE1BQUlDLFVBQVUsR0FBRyxJQUFqQjtBQUNBLFFBQU07QUFBQ0MsSUFBQUEsYUFBYSxFQUFFQztBQUFoQixNQUF3QkgsWUFBOUI7QUFDQSxRQUFNSSxNQUFNLEdBQUdMLElBQUksQ0FBRSxHQUFFSSxJQUFLLFNBQVQsQ0FBbkI7O0FBQ0EsTUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDWCxVQUFNLElBQUlDLFNBQUosQ0FBZSxlQUFjRixJQUFLLDhDQUFsQyxDQUFOO0FBQ0Q7O0FBQ0QsTUFBSTtBQUFDRyxJQUFBQSxJQUFEO0FBQU9DLElBQUFBO0FBQVAsTUFBeUJSLElBQTdCOztBQUNBLE1BQUlRLGNBQUosRUFBb0I7QUFDbEJELElBQUFBLElBQUksR0FBRyxJQUFQO0FBQ0Q7O0FBQ0QsUUFBTUUsS0FBSyxHQUFJQyxHQUFELElBQVMsZ0JBQUlILElBQUosRUFBVUcsR0FBVixDQUF2Qjs7QUFDQSxNQUFJQyxNQUFNLEdBQUdWLFlBQWI7QUFDQVUsRUFBQUEsTUFBTSxDQUFDQyxHQUFQLEdBQWFILEtBQWI7QUFDQSxRQUFNSSxZQUFZLEdBQXNDckIsY0FBYyxDQUFDWSxJQUFELENBQXRFO0FBQ0EsUUFBTVUsR0FBRyxHQUFHLElBQUlELFlBQUosQ0FBaUI7QUFBQ0YsSUFBQUEsTUFBRDtBQUFTSixJQUFBQTtBQUFULEdBQWpCLENBQVo7O0FBQ0EsTUFBSTtBQUNGTCxJQUFBQSxVQUFVLEdBQUcsTUFBTVksR0FBRyxDQUFDQyxPQUFKLENBQVlmLElBQVosQ0FBbkI7QUFDRCxHQUZELENBRUUsT0FBT2dCLEdBQVAsRUFBWTtBQUdaLFFBQUlSLGNBQUosRUFBb0I7QUFDbEIsWUFBTVEsR0FBTjtBQUNEOztBQUNELDJCQUFXVCxJQUFYLEVBQWlCUyxHQUFqQjtBQUNEOztBQUVELE1BQUlULElBQUksSUFBSSxDQUFDQyxjQUFiLEVBQTZCO0FBQzNCUyxJQUFBQSxPQUFPLENBQUNMLEdBQVIsQ0FBWU0sSUFBSSxDQUFDQyxTQUFMLENBQWVqQixVQUFmLEVBQTJCLElBQTNCLEVBQWlDa0Isa0JBQWpDLENBQVo7QUFDRDs7QUFFRCxTQUFPbEIsVUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG5pbXBvcnQgRHJpdmVyQ29tbWFuZCBmcm9tICcuL2RyaXZlci1jb21tYW5kJztcbmltcG9ydCBQbHVnaW5Db21tYW5kIGZyb20gJy4vcGx1Z2luLWNvbW1hbmQnO1xuaW1wb3J0IHsgRFJJVkVSX1RZUEUsIFBMVUdJTl9UWVBFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGVyckFuZFF1aXQsIGxvZywgSlNPTl9TUEFDRVMgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgY29tbWFuZENsYXNzZXMgPSBPYmplY3QuZnJlZXplKC8qKiBAdHlwZSB7Y29uc3R9ICovKHtcbiAgW0RSSVZFUl9UWVBFXTogRHJpdmVyQ29tbWFuZCxcbiAgW1BMVUdJTl9UWVBFXTogUGx1Z2luQ29tbWFuZFxufSkpO1xuXG4vKipcbiAqIFJ1biBhIHN1YmNvbW1hbmQgb2YgdGhlICdhcHBpdW0gZHJpdmVyJyB0eXBlLiBFYWNoIHN1YmNvbW1hbmQgaGFzIGl0cyBvd24gc2V0IG9mIGFyZ3VtZW50cyB3aGljaFxuICogY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgSlMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gSlMgb2JqZWN0IHdoZXJlIHRoZSBrZXkgaXMgdGhlIHBhcmFtZXRlciBuYW1lIChhcyBkZWZpbmVkIGluXG4gKiBkcml2ZXItcGFyc2VyLmpzKVxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4uL2V4dGVuc2lvbi9tYW5pZmVzdCcpLkV4dGVuc2lvblR5cGV9IEV4dFR5cGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbmZpZycpLkV4dGVuc2lvbkNvbmZpZzxFeHRUeXBlPn0gY29uZmlnT2JqZWN0IC0gRXh0ZW5zaW9uIGNvbmZpZyBvYmplY3RcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcnVuRXh0ZW5zaW9uQ29tbWFuZCAoYXJncywgY29uZmlnT2JqZWN0KSB7XG4gIC8vIFRPRE8gZHJpdmVyIGNvbmZpZyBmaWxlIHNob3VsZCBiZSBsb2NrZWQgd2hpbGUgYW55IG9mIHRoZXNlIGNvbW1hbmRzIGFyZVxuICAvLyBydW5uaW5nIHRvIHByZXZlbnQgd2VpcmQgc2l0dWF0aW9uc1xuICBsZXQganNvblJlc3VsdCA9IG51bGw7XG4gIGNvbnN0IHtleHRlbnNpb25UeXBlOiB0eXBlfSA9IGNvbmZpZ09iamVjdDtcbiAgY29uc3QgZXh0Q21kID0gYXJnc1tgJHt0eXBlfUNvbW1hbmRgXTtcbiAgaWYgKCFleHRDbWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY2FsbCAke3R5cGV9IGNvbW1hbmQgd2l0aG91dCBhIHN1YmNvbW1hbmQgbGlrZSAnaW5zdGFsbCdgKTtcbiAgfVxuICBsZXQge2pzb24sIHN1cHByZXNzT3V0cHV0fSA9IGFyZ3M7XG4gIGlmIChzdXBwcmVzc091dHB1dCkge1xuICAgIGpzb24gPSB0cnVlO1xuICB9XG4gIGNvbnN0IGxvZ0ZuID0gKG1zZykgPT4gbG9nKGpzb24sIG1zZyk7XG4gIGxldCBjb25maWcgPSBjb25maWdPYmplY3Q7XG4gIGNvbmZpZy5sb2cgPSBsb2dGbjtcbiAgY29uc3QgQ29tbWFuZENsYXNzID0gLyoqIEB0eXBlIHtFeHRDb21tYW5kPEV4dFR5cGU+fSAqLyhjb21tYW5kQ2xhc3Nlc1t0eXBlXSk7XG4gIGNvbnN0IGNtZCA9IG5ldyBDb21tYW5kQ2xhc3Moe2NvbmZpZywganNvbn0pO1xuICB0cnkge1xuICAgIGpzb25SZXN1bHQgPSBhd2FpdCBjbWQuZXhlY3V0ZShhcmdzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gaW4gdGhlIHN1cHByZXNzIG91dHB1dCBjYXNlLCB3ZSBhcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGludGVybmFsbHkgYW5kIHNob3VsZFxuICAgIC8vIGp1c3QgdGhyb3cgaW5zdGVhZCBvZiBwcmludGluZyBhbiBlcnJvciBhbmQgZW5kaW5nIHRoZSBwcm9jZXNzXG4gICAgaWYgKHN1cHByZXNzT3V0cHV0KSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGVyckFuZFF1aXQoanNvbiwgZXJyKTtcbiAgfVxuXG4gIGlmIChqc29uICYmICFzdXBwcmVzc091dHB1dCkge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGpzb25SZXN1bHQsIG51bGwsIEpTT05fU1BBQ0VTKSk7XG4gIH1cblxuICByZXR1cm4ganNvblJlc3VsdDtcbn1cblxuZXhwb3J0IHtcbiAgcnVuRXh0ZW5zaW9uQ29tbWFuZCxcbn07XG5cbi8qKlxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4uLy4uL3R5cGVzJykuRXh0ZW5zaW9uVHlwZX0gRXh0VHlwZVxuICogQHR5cGVkZWYge0V4dFR5cGUgZXh0ZW5kcyBpbXBvcnQoJy4uLy4uL3R5cGVzJykuRHJpdmVyVHlwZSA/IGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNsYXNzPERyaXZlckNvbW1hbmQ+IDogRXh0VHlwZSBleHRlbmRzIGltcG9ydCgnLi4vLi4vdHlwZXMnKS5QbHVnaW5UeXBlID8gaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQ2xhc3M8UGx1Z2luQ29tbWFuZD4gOiBuZXZlcn0gRXh0Q29tbWFuZFxuICovXG4iXX0=